---
import { delay } from 'nanodelay';

import { BaseN } from 'js-combinatorics';

import {
  type generalSpecialistsType,
  generalSpecialists,
} from '@schemas/generalsSchema';

import { type ConflictDatumType } from '@schemas/conflictSchemas';
import {
  type ExtendedGeneralType,
  type GeneralPairType,
} from '@schemas/ExtendedGeneral';

const DEBUG = false;

interface Props {
  TargetClass: generalSpecialistsType;
}

const { TargetClass } = Astro.props;

if (Astro.locals.CachedGenerals.length > 0) {
  if (
    Array.isArray(Astro.locals.ConflictData) &&
    Astro.locals.ConflictData.length === 0
  ) {
    await delay(15);
  }
  const generalBaseN = new BaseN(Astro.locals.CachedGenerals, 2);
  [...generalBaseN].forEach((pPair: ExtendedGeneralType[]) => {
    const primary: ExtendedGeneralType = pPair[0];
    const secondary: ExtendedGeneralType = pPair[1];
    if (primary === undefined || secondary === undefined) {
      return;
    }
    if (!primary.name.localeCompare(secondary.name)) {
      return;
    }
    if (TargetClass.localeCompare(generalSpecialists.enum.all)) {
      if (primary.score_as.localeCompare(TargetClass)) {
        if (DEBUG) {
          console.log(`${primary.name} does not match ${TargetClass}`);
        }
        return;
      }
      if (secondary.score_as.localeCompare(TargetClass)) {
        if (DEBUG) {
          console.log(`${secondary.name} does not match ${TargetClass}`);
        }
        return;
      }
    }
    if (DEBUG) {
      console.log(`considering pair ${primary.name} ${secondary.name}`);
    }
    if (
      Array.isArray(Astro.locals.CachedPairs) &&
      Astro.locals.CachedPairs.length > 0
    ) {
      if (DEBUG) {
        console.log(`CP is populated, test if present`);
      }
      const present = Astro.locals.CachedPairs.some((pair: GeneralPairType) => {
        if (!pair.primary.name.localeCompare(primary.name)) {
          if (!pair.secondary.name.localeCompare(secondary.name)) {
            return true;
          }
        }
        return false;
      });
      if (present) {
        if (DEBUG) {
          console.log(`rejecting pair ${primary.name} ${secondary.name}`);
        }
        return;
      }
    }
    if (DEBUG) {
      console.log(`past first present check`);
    }
    if (Astro.locals.ConflictData.length > 0) {
      if (DEBUG) {
        console.log(`checking conflicts`);
      }
      const relConflicts = Astro.locals.ConflictData.some(
        (cDatum: ConflictDatumType) => {
          const c = Object.values(cDatum.members).flat();
          if (c.includes(primary.name)) {
            if (Array.isArray(cDatum.others)) {
              c.push(...Object.values(cDatum.others).flat());
            }
            if (c.includes(secondary.name)) {
              return true;
            }
          }
          return false;
        },
      );
      if (!relConflicts) {
        if (DEBUG) {
          console.log(`no conflicts`);
        }
        const present = Astro.locals.CachedPairs.some(
          (pair: GeneralPairType) => {
            if (!pair.primary.name.localeCompare(primary.name)) {
              if (!pair.secondary.name.localeCompare(secondary.name)) {
                return true;
              }
            }
            return false;
          },
        );
        if (!present) {
          if (DEBUG) {
            console.log(`still not present after conflicts`);
          }
          const newPair: GeneralPairType = {
            primary: primary,
            secondary: secondary,
          };
          Astro.locals.CachedPairs.push(newPair);
          if (DEBUG) {
            console.log(`${Astro.locals.CachedPairs.length} pairs`);
          }
        }
      } else {
        if (DEBUG) {
          console.log(`conflicts, rejecting`);
        }
      }
    } else {
      const present = Astro.locals.CachedPairs.some((pair: GeneralPairType) => {
        if (!pair.primary.name.localeCompare(primary.name)) {
          if (!pair.secondary.name.localeCompare(secondary.name)) {
            return true;
          }
        }
        return false;
      });
      if (!present) {
        const newPair: GeneralPairType = {
          primary: primary,
          secondary: secondary,
        };
        Astro.locals.CachedPairs.push(newPair);
      } else {
        if (DEBUG) {
          console.log(`rejecting pair ${primary.name} ${secondary.name}`);
        }
      }
    }
  });
} else{
  if (DEBUG) {
    console.log(`Cached Pairs finds empty Astro.locals.CachedPairs.`);
  }
}
---

<div class="hidden">
  All Pairs Component
  <ol>
    {Astro.locals.CachedPairs.map((thisPair: GeneralPairType) => (
      <li>
        <ul>
          <li>Primary: {thisPair.primary.name}</li>
          <li>Secondary: {thisPair.secondary.name}</li>
        </ul>
      </li>
    ))}
  </ol>
</div>
<style>
  .hidden {
    display: none;
  }
</style>