---
import type { ComponentProps } from 'astro/types';

import { ulid } from 'ulidx';

import AllPairs from '@components/general/AllPairs.astro';
type AllPairsPropsType = ComponentProps<typeof AllPairs>;

import {DisplayGrid} from './DisplayGrid'

import {
  AscendingLevels,
  type BuffParamsType, CovenantAttributeCategory,
  qualityColor,
} from '../../../schemas/baseSchemas';

import {
  type GeneralElementType,
  type generalSpecialistsType,
  type generalUseCaseType, generalUseCase,
} from '../../../schemas/generalsSchema';
import AllGenerals from '../AllGenerals.astro';
import AllConflicts from '../AllConflicts.astro';

const DEBUG = false;

interface Props {
  generalClass: generalSpecialistsType;
  useCase?: generalUseCaseType
}

let { generalClass, useCase }: Props = Astro.props;

if(useCase === null || useCase === undefined) {
  if(DEBUG) {
    console.log(`warning, use case was null`)
  }
  useCase = generalUseCase.enum.Attack;
} else {
  if (DEBUG) {
    console.log(`use case was ${useCase}`)
  }
}

const table_name = `${Astro.url.pathname}-${ulid()}`;

//while no general can *have* both, I can evaluate generals assuming I will give them whichever that particular one needs.
let MyInvestmentLevel: BuffParamsType = {
  special1: qualityColor.enum.Gold,
  special2: qualityColor.enum.Gold,
  special3: qualityColor.enum.Gold,
  special4: qualityColor.enum.Gold,
  special5: qualityColor.enum.Disabled,
  stars: AscendingLevels.enum['5red'],
  covenants: CovenantAttributeCategory.enum.Disabled,
  dragon: true,
  beast: true,
};

// @ts-ignore
const AllPairsProps: AllPairsPropsType = {
  TargetClass: generalClass,
};

const DisplayGridProps = {
  tableName: table_name,
  InvestmentLevel: MyInvestmentLevel,
  RawPairs: Astro.locals.CachedPairs,
  useCase: useCase,
};
---

<div class="table-container non-content">
  <AllPairs {...AllPairsProps} />
  <DisplayGrid {...DisplayGridProps} client:only="lit" />

  <style>
    .table-container {
      display: block;
      flex: 2 0 auto;
    }
  </style>
</div>
