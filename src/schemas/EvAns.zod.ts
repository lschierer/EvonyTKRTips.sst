//import { z.number, z.object, z.output, z.record } from "astro:content";

import { z } from "astro:content"

import {
    ActivationSituations
} from './baseSchemas'

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const ScoreWeightings = z.record(
  ActivationSituations,
  z.object({
    GroundOffense: z.number(),
    GroundToughness: z.number(),
    RangedOffense: z.number(),
    RangedToughness: z.number(),
    MountedOffense: z.number(),
    MountedToughness: z.number(),
    SiegeOffense: z.number(),
    SiegeToughness: z.number(),
    EnemyDebuffs: z.number(),
    default: z.number(),
  })
);

export type ScoreWeightings = z.output<typeof ScoreWeightings>;

export const PvPAttributeMultipliers = z.object({
    Offensive: z.object({
      AllTroopAttack: z.number(),
      GroundAttack: z.number(),
      RangedAttack: z.number(),
      SiegeAttack: z.number(),
      MountedAttack: z.number(),
      InBattleMovementBonus: z.number(),
      RangedRangeBonus: z.number(),
      SiegeRangeBonusFlat: z.number(),
      SiegeRangeBonusPercent: z.number(),
      MarchSizeIncrease: z.number(),
      RallyCapacity: z.number(),
    }),
    Toughness: z.object({
      AllTroopHP: z.number(),
      RangedHP: z.number(),
      MountedHP: z.number(),
      GroundHP: z.number(),
      SiegeHP: z.number(),
      AllTroopDefense: z.number(),
      RangedDefense: z.number(),
      MountedDefense: z.number(),
      SiegeDefense: z.number(),
      GroundDefense: z.number(),
    }),
    Preservation: z.object({
      Death2Wounded: z.number(),
      Death2WoundedWhenAttacking: z.number(),
      Death2Souls: z.number(),
      Death2SoulsinMainCity: z.number(),
    }),
    AttackingAttackDebuff: z.object({
      ReduceAllAttack: z.number(),
      ReduceEnemyMountedAttack: z.number(),
      ReduceEnemyRangedAttack: z.number(),
      ReduceEnemySiegeAttack: z.number(),
      ReduceEnemyGroundAttack: z.number(),
    }),
    AttackingToughnessDebuff: z.object({
      ReduceEnemyAllHP: z.number(),
      ReduceEnemyRangedHP: z.number(),
      ReduceEnemySiegeHP: z.number(),
      ReduceEnemyMountedHP: z.number(),
      ReduceEnemyGroundHP: z.number(),
      ReduceEnemyAllDefense: z.number(),
      ReduceEnemyRangedDefense: z.number(),
      ReduceEnemySiegeDefense: z.number(),
      ReduceEnemyMountedDefense: z.number(),
      ReduceEnemyGroundDefense: z.number(),
    }),
    ReinforcingAttackDebuff: z.object({
      ReduceAllAttack: z.number(),
      ReduceEnemyMountedAttack: z.number(),
      ReduceEnemyRangedAttack: z.number(),
      ReduceEnemySiegeAttack: z.number(),
      ReduceEnemyGroundAttack: z.number(),
    }),
    ReinforcingToughnessDebuff: z.object({
      ReduceEnemyAllHP: z.number(),
      ReduceEnemyRangedHP: z.number(),
      ReduceEnemySiegeHP: z.number(),
      ReduceEnemyMountedHP: z.number(),
      ReduceEnemyGroundHP: z.number(),
      ReduceEnemyAllDefense: z.number(),
      ReduceEnemyRangedDefense: z.number(),
      ReduceEnemySiegeDefense: z.number(),
      ReduceEnemyMountedDefense: z.number(),
      ReduceEnemyGroundDefense: z.number(),
    }),
    Debilitation: z.object({
      Wounded2Death: z.number(),
      InCityWounded2Death: z.number(),
      Wounded2DeathWhenAttacking: z.number(),
    }),
  });

export type PvPAttributeMultipliers = z.output<
  typeof PvPAttributeMultipliers
>;
