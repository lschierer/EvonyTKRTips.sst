---
export const prerender = true;

import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from 'astro';
import type { CollectionEntry } from 'astro:content';
import { getEntry, getCollection } from 'astro:content';
import type { ComponentProps } from 'astro/types';

import AllGenerals from '@components/general/AllGenerals.astro';
import AllConflicts from '@components/general/AllConflicts.astro';

import {
  generalSpecialists,
  generalUseCase,
  type generalSpecialistsType
} from '../../../schemas/generalsSchema';

const DEBUG = true;

export const getStaticPaths = (async () => {
  const pairEntries = await getCollection('docs', ({id}) => {
    return id.includes('pair-picking');
  });

  return pairEntries.map((entry) => {
     console.log(`matched ${entry.slug}`)
    const id = entry.slug;
     const specialist = entry.slug.split('/').pop()
    return ({
      params: {
        slug: id,
        Specialist: specialist,
      },
      props: { entry },
    })
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const {entry}: Props = Astro.props;

const { Specialist }: Params = Astro.params;
/*let entry: CollectionEntry<'docs'> | undefined;
if(Specialist !== null && Specialist !== undefined) {
  entry = await getEntry('docs', `generals/pair-picking/${Specialist}`);
}*/

if(entry === undefined || entry === null) {
  if(DEBUG) {
    console.log(`Specialist ${Specialist} not found`)
    throw new Error('Specialist is required');
  } else {
    return Astro.redirect('/404');
  }
}

let TargetClass: generalSpecialistsType;
if(!Specialist.toLocaleLowerCase().localeCompare(generalSpecialists.enum.Archers.toLocaleLowerCase())) {
  TargetClass = generalSpecialists.enum.Archers;
} else if (!Specialist.toLocaleLowerCase().localeCompare(generalSpecialists.enum.Mounted.toLocaleLowerCase())) {
  TargetClass = generalSpecialists.enum.Mounted;
} else if (!Specialist.toLocaleLowerCase().localeCompare(generalSpecialists.enum.Monsters.toLocaleLowerCase())) {
  TargetClass = generalSpecialists.enum.Mounted;
} else if (! Specialist.toLocaleLowerCase().localeCompare(generalSpecialists.enum.Ground.toLocaleLowerCase())) {
  TargetClass = generalSpecialists.enum.Ground;
} else if (!Specialist.toLocaleLowerCase().localeCompare(generalSpecialists.enum.Siege.toLocaleLowerCase())) {
  TargetClass = generalSpecialists.enum.Siege
} else if (!Specialist.toLocaleLowerCase().localeCompare(generalSpecialists.enum.Wall.toLocaleLowerCase())) {
  TargetClass = generalSpecialists.enum.Wall;
} else if (!Specialist.toLocaleLowerCase().localeCompare(generalSpecialists.enum.Mayor.toLocaleLowerCase())) {
  TargetClass = generalSpecialists.enum.Mayor;
} else {
  if(DEBUG) {
    console.log(`Specialist ${Specialist} not valid`)
    throw new Error('Specialist is required');
  } else {
    return Astro.redirect('/404');
  }
}

if(DEBUG) {
  console.log(`Specialist.astro Specialist ${Specialist} became TargetClass ${TargetClass}`)
}

const { Content } = await entry.render();
---

<StarlightPage
  frontmatter={{
    title: entry.data.title,
    lastUpdated: entry.data.lastUpdated,
    tableOfContents: entry.data.tableOfContents,
  }}
>
  {DEBUG && `Dynamic Template`}
  <AllGenerals TargetClass={TargetClass} />
  <AllConflicts />
  <Content />
</StarlightPage>
