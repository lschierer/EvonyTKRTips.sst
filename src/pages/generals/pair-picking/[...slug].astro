---
export const prerender = false;

import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import type { CollectionEntry } from "astro:content";
import { getEntry, getCollection } from "astro:content";

import { ConflictDatum } from "@schemas/conflictSchemas";

const DEBUG = false;

let { slug } = Astro.params;
if (slug === undefined) {
  console.log(`slug was undefined`);
  console.log(JSON.stringify(Astro.params));
  slug = "generals/pair-picking";
}
console.log(`slug is ${slug}`);
let entry: CollectionEntry<"docs"> | undefined = undefined;

if (!slug.localeCompare("generals/pair-picking")) {
  entry = await getEntry("docs", "generals/pair-picking");
} else {
  entry = await getEntry("docs", `generals/pair-picking/${slug}`);
}

if (entry === undefined) {
  console.log(`${slug} was not found`);
  return Astro.redirect("/404");
}

if (Array.isArray(Astro.locals.ConflictData)) {
  const ConflictCollection: CollectionEntry<"generalConflictData">[] =
    await getCollection("generalConflictData");
  if (ConflictCollection !== undefined && ConflictCollection !== null) {
    await Promise.all(
      ConflictCollection.map(async ({ data }) => {
        const v1 = await ConflictDatum.spa(data);
        if (v1.success) {
          Astro.locals.ConflictData.push(v1.data);
        }
      }),
    );
    if (DEBUG) {
      console.log(`conflictData is ${Astro.locals.ConflictData.length}`);
    }
  }
}

const { Content } = await entry.render();
---

<StarlightPage
  frontmatter={{
    title: entry.data.title,
    lastUpdated: entry.data.lastUpdated,
    tableOfContents: entry.data.tableOfContents,
  }}
>
  {DEBUG && `Dynamic Template`}
  <Content />
</StarlightPage>
