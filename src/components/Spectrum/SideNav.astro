---
import {  getCollection } from 'astro:content';
import { Debug } from 'astro/components';


const curUrl = new URL(Astro.request.url);
const selection = curUrl.pathname;
let base = selection.substring(1).includes('/') ? selection.substring(1).split('/').reverse().pop() : selection;
base = base.endsWith('/')? base : base + '/';
base = base.startsWith('/')? base.substring(1) : base;
console.log(`selection is ${selection}, base is ${base}`)

let ReportsVisible = false;

let items: string[] = [];

let entries= await getCollection('docs', ({id}) => {
  return id.startsWith(base)
});
entries = entries.sort((a,b) =>{
  const temp = [a.slug.toString().toLowerCase(), b.slug.toString().toLowerCase()];
  if(a.data.sortOrder && b.data.sortOrder){
      return a.data.sortOrder - b.data.sortOrder;
  }
  return a.slug.toString().toLowerCase().localeCompare(b.slug.toString().toLowerCase());
});

entries.forEach((e) => {
    items.push(e.slug);
})

if(base === 'reports/') {
    console.log(`detected base monsters`)
    ReportsVisible = true;
    let results = await getCollection('legacyReports');
    results = results.sort((a,b) => {
        if(a.data.sortOrder && b.data.sortOrder) {
            return a.data.sortOrder - b.data.sortOrder;
        }
        return a.slug.toString().toLowerCase().localeCompare(b.slug.toString().toLowerCase());
    });
    console.log(`retrieved ${results.length}`);
    results.forEach((r) => {
        console.log(`processing result ${r.slug}`);
        items.push(r.slug);

    })
}

console.log(`items of size ${items.length}`)
---

<script>
    import '@spectrum-web-components/sidenav/sp-sidenav.js';
    import '@spectrum-web-components/sidenav/sp-sidenav-heading.js';
    import '@spectrum-web-components/sidenav/sp-sidenav-item.js';
    import './SideNav'
</script>
<sp-nm items={items}></sp-nm>
