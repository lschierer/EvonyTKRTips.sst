---
import type { Props } from '@astrojs/starlight/props';
import { Icon } from '@astrojs/starlight/components';
---

{/* This is intentionally inlined to avoid FOUC. */}
<script is:inline>

  window.StarlightThemeProvider = (() => {
    const storedTheme =
      typeof localStorage !== 'undefined' &&
      localStorage.getItem('starlight-theme');
    const theme =
      storedTheme ||
      (window.matchMedia('(prefers-color-scheme: light)').matches
        ? 'light'
        : 'dark');
    document.documentElement.dataset.theme =
      theme === 'light' ? 'light' : 'dark';
    return {
      updatePickers(theme = storedTheme || 'auto') {
        document.querySelectorAll('div.spectrum').forEach((spectrum) => {
          if (theme === 'light') {
            if (!spectrum.classList.contains('spectrum--light')) {
              spectrum.classList.add('spectrum--light');
            }
          } else if (theme === 'dark') {
            if (!spectrum.classList.contains('spectrum--dark')) {
              spectrum.classList.add('spectrum--dark');
            }
          } else {
            const prefers = window.matchMedia('(prefers-color-scheme: light)')
              .matches
              ? 'light'
              : 'dark';
            this.updatePickers(prefers);
          }
        });
        document
          .querySelectorAll('starlight-theme-select')
          .forEach((picker) => {
            const select = picker.querySelector('select');
            if (select) select.value = theme;
            /** @type {HTMLTemplateElement | null} */
            const tmpl = document.querySelector(`#theme-icons`);
            const newIcon = tmpl && tmpl.content.querySelector('.' + theme);
            if (newIcon) {
              const oldIcon = picker.querySelector('svg.label-icon');
              if (oldIcon) {
                oldIcon.replaceChildren(...newIcon.cloneNode(true).childNodes);
              }
            }
          });
        if(theme === 'light' || theme === 'dark') {
          document.querySelectorAll('sp-theme').forEach((sptheme) => {
            if(theme === 'light') {
              const colorattribute = sptheme.getAttribute('color');
              if(colorattribute && colorattribute.localeCompare('light')){
                sptheme.setAttribute('color','light');
              }
            }else if(theme === 'dark') {
              const colorattribute = sptheme.getAttribute('color');
              if(colorattribute && colorattribute.localeCompare('dark')){
                sptheme.setAttribute('color','dark');
              }
            }else {
              console.error`failure setting theme`
            }
          });
        }
      },
    };
  })();
</script>

<template id="theme-icons">
  <Icon name="sun" class="light" />
  <Icon name="moon" class="dark" />
  <Icon name="laptop" class="auto" />
</template>
