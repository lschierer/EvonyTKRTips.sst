---
import { Debug } from "astro:components";
import {
  getEntry,
  getCollection,
  type CollectionEntry,
  z,
} from "astro:content";
import "iconify-icon";

import { DetailView } from "./DetailView";

import { delay } from "nanodelay";

import {
  AscendingLevels,
  type BuffType,
  Condition,
  type ConditionType,
  qualityColor,
  syslogSeverity,
} from "@schemas/baseSchemas";

import {
  ConflictArray, 
  ConflictDatum,   
  type bookConflictsType,
  type ConflictDatumType,
 } from '@schemas/conflictSchemas'

 import {
  Note,
  Display,
  type NoteType,
  GeneralElement,
  type GeneralElementType,
type GeneralClassType,
 } from '@schemas/generalsSchema'

 import { 
  type ExtendedGeneralType,
  ExtendedGeneralStatus,
  } from "@schemas/ExtendedGeneral";

import { 
  type BookType,
  specialSkillBook,
  type specialSkillBookType,
  type standardSkillBookType,
 } from "@schemas/bookSchemas";

const DEBUG = false;

import { BookIcon } from "@spectrum-web-components/icons-workflow";



interface Props {
  generalEntry: string;
}

//global variables
let usageNotes = "";
let EvAnsRank = 0;
let generalName = "";
let attack = 0;
let defense = 0;
let hp = 0;

let level = 1;
const intrinsic = ["leadership", "attack", "defense", "politics"];

let data;

let pageG: GeneralClassType | null = null;
let Egeneral: ExtendedGeneralType;
//end globals

const { generalEntry } = Astro.props;

if (
  generalEntry === null ||
  generalEntry === undefined ||
  generalEntry.length <= 0
) {
  return Astro.redirect("/404");
}

if(Array.isArray(Astro.locals.CachedGenerals)) {
  pageG = Astro.locals.CachedGenerals.find((thisG: GeneralClassType) => {
    if(!generalEntry.localeCompare(thisG.name)) {
      return true
    }
    return false
  })
}
  
  
---

{(pageG !== null && pageG !== undefined)  ? (<DetailView general={pageG} client:only="lit"></DetailView>) : (<span>General Not Found</span>)}


<style >
    div.GeneralDetails {
        display: flex;
        flex-direction: column;

        & ul {
            margin: 0px;
            padding-top: 0px;
            padding-left: 1rem;

            & li {
                padding-top: 0px;
                padding-bottom: 0px;
                margin-top: 0px;
                margin-bottom: 0px;
                margin-left: 0.5rem;;                
            }
        }

        :is(div) {
            align-content: center;
            justify-content: center;
            margin: 0.1px;
        }

        & .spectrum-Heading {
            color: var(--sl-color-text-accent);
        }

        & .center {
            align-self: center;
        }

        & .label {
            color: var(--sl-color-text-accent);
        }

        & .IntrinsicAttributes {
            columns: 4;
        }


        & .Stars {
            display: flex;
            flex-direction: row;
            justify-content: center;
        }

        & .Specialities {
            margin: 1px;
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            column-gap: 2px;
            align-items: start;

            & [class^="Speciality"] {
                grid-column-end: span 1;
                display: flex;
                flex-direction: column;
                justify-content: space-between;
            }

            & .Green {
                background-color: var(--spectrum-celery-400);
            }

            & .Blue {
                background-color: var(--spectrum-blue-400);
            }

            & .Purple {
                background-color: var(--spectrum-purple-400);
            }

            & .Orange {
                background-color: var(--spectrum-orange-400);
            }

            & .Gold {
                background-color: var(--spectrum-yellow-400);
            }
        }

        & .Ascending {
            margin: 1px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        

    }

    aside.starlight-aside {
        margin-top: 5px;
    }

</style>
