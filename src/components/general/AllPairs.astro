---
import { delay } from "nanodelay";

import { BaseN } from "js-combinatorics";

import { 
  GeneralClass,
  type GeneralClassType,
  Display,
   type generalSpecialistsType 
} from "@schemas/generalsSchema";

import { type ConflictDatumType } from "@schemas/conflictSchemas";
import type { GeneralPairType } from "@schemas/ExtendedGeneral";

const DEBUG = false;

interface Props {
  TargetClass: generalSpecialistsType;
}

  if (Astro.locals.CachedGenerals.length > 0) {
    if (
      Array.isArray(Astro.locals.ConflictData) &&
      Astro.locals.ConflictData.length === 0
    ) {
      await delay(15);
    }
    const generalBaseN = new BaseN(Astro.locals.CachedGenerals, 2);
    [...generalBaseN].forEach((pPair: Array<GeneralClassType>) => {
      const primary = pPair[0];
      const secondary = pPair[1];
      if (primary === undefined || secondary === undefined) {
        return;
      }
      if (!primary.name.localeCompare(secondary.name)) {
        return;
      }
      if (
        Array.isArray(Astro.locals.CachedPairs) &&
        Astro.locals.CachedPairs.length > 0
      ) {
        const present = Astro.locals.CachedPairs.some(
          (pair: GeneralPairType) => {
            if (!pair.primary.name.localeCompare(primary.name)) {
              if (!pair.secondary.name.localeCompare(secondary.name)) {
                return true;
              }
            }
            return false;
          });
        if (present) {
          return;
        }
      }
      if (Astro.locals.ConflictData.length > 0) {
        const relConflicts = Astro.locals.ConflictData.some(
          (cDatum: ConflictDatumType) => {
            const c = Object.values(cDatum.members).flat();
            if (Array.isArray(cDatum.others)) {
              c.push(...Object.values(cDatum.others).flat());
            }
            if (c.includes(primary.name)) {
              if (c.includes(secondary.name)) {
                return true;
              }
            }
            return false;
          }
        );
        if (!relConflicts) {
          if (
            !Astro.locals.CachedPairs.some((thisPair: GeneralPairType) => {
              if (thisPair?.primary?.name !== undefined) {
                if (
                  thisPair.primary.name.localeCompare(
                    primary.name
                  )
                ) {
                  if (
                    thisPair.secondary.name.localeCompare(
                      secondary.name
                    )
                  ) {
                    return true;
                  }
                }
              }
              return false;
            })
          ) {
            const newPair: GeneralPairType = {
              primary: primary,
              secondary: secondary,
            }  
            Astro.locals.CachedPairs.push(newPair);
          }
        }
      } else {
        if (
          !Astro.locals.CachedPairs.some((thisPair) => {
            if (thisPair !== undefined && thisPair !== null) {
              if (
                thisPair.primary.general.name.localeCompare(
                  primary.name
                )
              ) {
                if (
                  thisPair.secondary.general.name.localeCompare(
                    secondary.name
                  )
                ) {
                  return true;
                }
              }
            }
          })
        ) {
          const newPair: GeneralPairType = {
            primary: primary,
            secondary: secondary,
          };
          Astro.locals.CachedPairs.push(newPair);
        }
      }
    });
  }

---

{
  DEBUG && Astro.locals.CachedPairs && (
    <ol>
      {Astro.locals.CachedPairs.map((thisPair: GeneralPairType) => (
        <li>
          <ul>
            <li>Primary: {thisPair.primary.name}</li>
            <li>Secondary: {thisPair.secondary.name}</li>
          </ul>
        </li>
      ))}
    </ol>
  )
}
