---
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';
import type { ComponentProps } from 'astro/types';

import { delay } from 'nanodelay';

import { BuffParamsType, qualityColor, AscendingLevels } from '../../schemas/baseSchemas';

import {
  GeneralElement,
  GeneralClass,
  Display,
  type GeneralClassType,
  type GeneralElementType,
  generalUseCase,
  generalSpecialists,
  type generalSpecialistsType
} from '@schemas/generalsSchema';

import {
  ExtendedGeneral,
  ExtendedGeneralStatus,
  type ExtendedGeneralType,
} from '@schemas/ExtendedGeneral';
import { SpecialityType } from '../../schemas/specialitySchema';
import { BookType } from '../../schemas/bookSchemas';

import {EvAnsScoreComputer} from '@components/general/buffComputers/EvAnsRanking/EvAnsScoreComputer';

const DEBUG = false;

interface Props {
  TargetClass?: generalSpecialistsType;
  }

const { TargetClass } = Astro.props;

const generalObjects: CollectionEntry<'generals'>[] =
  await getCollection('generals');

const  InvestmentLevel: BuffParamsType = {
    special1: qualityColor.enum.Gold,
    special2: qualityColor.enum.Gold,
    special3: qualityColor.enum.Gold,
    special4: qualityColor.enum.Gold,
    special5: qualityColor.enum.Disabled,
    stars: AscendingLevels.enum[10],
    dragon: true,
    beast: true,
  };

if (generalObjects !== undefined && generalObjects !== null) {
  await Promise.all(
    generalObjects.map(async (element: GeneralElementType, index) => {
      const gc: GeneralClassType = element.data.general;
      const eg: ExtendedGeneralType = {
        name: gc.name,
        leadership: gc.leadership,
        attack: gc.attack,
        defense: gc.defense,
        politics: gc.politics,
        leadership_increment: gc.leadership_increment,
        attack_increment: gc.attack_increment,
        defense_increment: gc.defense_increment,
        politics_increment: gc.politics_increment,
        level: gc.level,
        stars: gc.stars,
        score_as: gc.score_as,
        ascending: gc.ascending,
        note: gc.note,
        specialities: new Array<SpecialityType>(),
        books: new Array<BookType>(),
      };
      if(TargetClass !== undefined && TargetClass !== null && generalSpecialists.enum.all.localeCompare(TargetClass)){
        if (TargetClass.toLocaleString().toLocaleLowerCase().localeCompare(eg.score_as.toLocaleString().toLocaleLowerCase())) {
          if(DEBUG) {
            console.log(`AllGenerals rejecting ${eg.name}: ${eg.score_as} != ${TargetClass}`)
          }
          return;
        }
      }
      gc.books && await Promise.all(gc.books.map(async (gb) => {
        const gbe: CollectionEntry<'skillBooks'> | undefined = await getEntry('skillBooks', gb);
        if (gbe !== null && gbe !== undefined) {
          const _book: BookType = gbe.data;
          eg.books.push(_book);
        }
      }));

      gc.specialities && await Promise.all(gc.specialities.map(async (gs) => {
        const gse: CollectionEntry<'specialities'> | undefined = await getEntry('specialities', gs);
        if(gse !== null && gse !== undefined) {
          eg.specialities.push(gse.data);
        }
      }));

      Astro.locals.CachedGenerals.push(eg);

    }),
  );
  if (DEBUG) {
    console.log(`CachedGenerals is ${Astro.locals.CachedGenerals.length}`);
  }
}
Astro.locals.CachedGenerals.sort((a, b) => {
  if(a === null || a === undefined) {
    if (b === null || b === undefined) {
      return 0
    }
    return -1
  } else if (b === null || b === undefined) {
    return 1;
  } else {
    return a.name.localeCompare(b.name)
  }
})
---

{
  DEBUG && (
  <ol>
    {Astro.locals.CachedGenerals.map((thisG: ExtendedGeneralType) => (
      <li>
        <dl>
          <dt>{thisG.name}</dt>
          <!--<dd>${JSON.stringify(thisG)}</dd>-->
          <dd>{EvAnsScoreComputer(
            generalUseCase.enum.Attack,
            thisG,
            Display.enum.summary,
            InvestmentLevel
          )}</dd>
        </dl>
      </li>
    ))}
  </ol>
    )
  }
