---
import { getCollection, type CollectionEntry } from "astro:content";
import type { ComponentProps } from "astro/types";

import { delay } from 'nanodelay'

import {
  GeneralElement,
  GeneralClass,
  type GeneralClassType,
  type GeneralElementType,
} from "@schemas/generalsSchema";

import {
  ExtendedGeneral,
  ExtendedGeneralStatus,
  type ExtendedGeneralType,
} from "@schemas/ExtendedGeneral";

const DEBUG = true;

const generalObjects: CollectionEntry<"generals">[] =
  await getCollection("generals");

if(generalObjects !== undefined && generalObjects !== null) {
  await Promise.all(
    generalObjects.map(async({data})=> {
      const v1 = await GeneralElement.spa(data);
      if(v1.success){
        Astro.locals.CachedGenerals.push(v1.data.general)
      }
    })
  )
  if(DEBUG) {
    console.log(`CachedGenerals is ${Astro.locals.CachedGenerals.length}`)
  }
}

---

{
  DEBUG && (
    <ol>
      {Astro.locals.CachedGenerals.map((thisG: GeneralClassType) => (
        <li>
          <dl>
            <dt>{thisG.name}</dt>
            <dd>${JSON.stringify(thisG)}</dd>
          </dl>
        </li>
      ))}
    </ol>
  )
}
