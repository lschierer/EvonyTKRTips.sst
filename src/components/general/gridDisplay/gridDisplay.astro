---
//this component many not be SSR because it depends on an API endpoint I cannot make static. 
export const prerender = false;
import { Debug } from 'astro:components';
import type { ComponentProps } from 'astro/types';

import { z } from 'zod';

import "@spectrum-css/vars/dist/spectrum-global.css";
import "@spectrum-css/vars/dist/spectrum-medium.css";
import "@spectrum-css/page/dist/index.css";
import "@spectrum-css/table/dist/index.css";
import "@spectrum-css/icon/dist/index.css";
import "@spectrum-css/ui-icons/dist/medium/Arrow100.svg";

import {
  ConflictDatum,
  type ConflictDatumType,
  GeneralElement,
  type GeneralElementType,
  GeneralPair,
  type GeneralPairType,
} from '@schemas/index';

interface Props {
  allGenerals: GeneralElementType[],
  allConflicts: ConflictDatumType[],
  class?: String;
}

const { allGenerals, allConflicts } = Astro.props;


const pairsData: Array<GeneralPairType|undefined> = (await Promise.all(allGenerals.map(async (tg) => {
  const response = await fetch(new URL(`/generalPairs/${tg.general.name}/${tg.general.score_as}.json`, Astro.url));
  const j: GeneralPairType[] = await response.json()
  const validation = z.array(GeneralPair).safeParse(j)
  if(validation.success) {
    return validation.data;
  } else {
    console.log(`${validation.error}`)
  }
  }))).filter((pair) => {
    const validation = z.array(GeneralPair).safeParse(pair);
    if(validation.success) {
      return true;
    } else {
      console.log(`${validation.error}`)
      console.log(`${JSON.stringify(pair)}`)
      return false;
    }
  }).flat();

---

<div
  class="spectrum-Table-scroller spectrum-Table spectrum-Table--sizeM spectrum-Table--emphasized"
  style="height: 600px"
>
  <div class="spectrum-Table-main" role="table">
    <div class="spectrum-Table-head" role="rowgroup">
      <div role="row">
        <div
          class="spectrum-Table-headCell"
          role="columnheader"
        >
          <span class="spectrum-Table-columnTitle">Index</span>
        </div>
        <div
          class="spectrum-Table-headCell is-sortable is-sorted-desc"
          role="columnheader"
          aria-sort="descending"
          tabindex="0"
        >
          <span class="spectrum-Table-columnTitle">Primary General</span>
        </div>
        <div 
          class="spectrum-Table-headCell" 
          role="columnheader"
          aria-sort="none"
          tabindex="0"
        >
          <span class="spectrum-Table-columnTitle">Assistant General
        </div>
      </div>
    </div>
    
    <div class="spectrum-Table-body" role="rowgroup">
      {pairsData.map((pi, index) => (pi && (
        <div class="spectrum-Table-row" role="rowgroup">
          <div class="spectrum-Table-cell" role="cell">
            {index}
          </div>
          <div class="spectrum-Table-cell" role="cell">
            {pi ? pi.primary.name : `${index} not present `}
          </div>
          <div class="spectrum-Table-cell" role="cell">
            {pi? pi.secondary.name : `${index} not present`}
          </div>
        </div>
      )))}
    </div> 
  </div>
</div>

<style>

</style>