---
export const prerender = false;

import { z } from "astro:content";

import "@spectrum-css/vars/dist/spectrum-global.css";
import "@spectrum-css/vars/dist/spectrum-medium.css";
import "@spectrum-css/page/dist/index.css";
import "@spectrum-css/table/dist/index.css";
import "@spectrum-css/icon/dist/index.css";
import "@spectrum-css/ui-icons/dist/medium/Arrow100.svg";

import {
  ExtendedGeneral,
  GeneralElement,
  type GeneralElementType,
  GeneralPair,
  type GeneralPairType,
  GeneralClass,
} from "@schemas/index";

import { DisplayGeneral, DisplayPair } from "./general";

interface Props {
  name: string;
  class?: string;
}

const DEBUG = true;

const { name } = Astro.props;

const myUrl = Astro.url;

const sortByOptions = z.enum(["primary", "secondary", "EvAnsRank"]);
type sortByOptionsType = z.infer<typeof sortByOptions>;

const sortDirectionOptions = z.enum(["ascending", "decending"]);
type sortDirectionType = z.infer<typeof sortDirectionOptions>;

let sortBy: sortByOptionsType = sortByOptions.enum.primary;
let sortDirection: sortDirectionType = sortDirectionOptions.enum.decending;

const pairs: Array<DisplayPair> = new Array<DisplayPair>();

let sortPrimaryInput: boolean | sortDirectionType | null = false;
let sortSecondaryInput: boolean | sortDirectionType | null = false;

let sortPrimaryValue: sortDirectionType = sortDirectionOptions.enum.decending;
let sortSecondaryValue: sortDirectionType = sortDirectionOptions.enum.decending;

let sortEvAnsRankInput: boolean | sortDirectionType | null = false;
let sortEvAnsRankValue: sortDirectionType = sortDirectionOptions.enum.decending;

if (Astro.request.method === "POST") {
  try {
    if (DEBUG) console.log(`executing POST try block`);
    const data = await Astro.request.formData();
    if (sortPrimaryInput === false) {
      //not prievously sorted by primary
      const v = sortDirectionOptions.safeParse(data.get("pGeneral"));
      if (v.success) {
        if (DEBUG) console.log(`sortPrimaryInput was false, is now ${v.data}`);
        sortPrimaryInput = true;
        sortBy = sortByOptions.enum.primary;
        sortDirection = v.data;
        if (sortDirection === sortDirectionOptions.enum.ascending) {
          sortPrimaryValue = sortDirectionOptions.enum.decending;
        } else {
          sortPrimaryValue = sortDirectionOptions.enum.ascending;
        }
      }
    } else {
      if (DEBUG)
        console.log(`values are ${sortPrimaryInput} and ${sortSecondaryInput}`);
    }
    if (sortSecondaryInput === false) {
      //not prievously sorted by primary
      const v = sortDirectionOptions.safeParse(data.get("sGeneral"));
      if (v.success) {
        if (DEBUG)
          console.log(`sortSecondaryInput was false, is now ${v.data}`);
        sortSecondaryInput = true;
        sortBy = sortByOptions.enum.secondary;
        sortDirection = v.data;
        if (sortDirection === sortDirectionOptions.enum.ascending) {
          sortSecondaryValue = sortDirectionOptions.enum.decending;
        } else {
          sortSecondaryValue = sortDirectionOptions.enum.ascending;
        }
      }
    } else {
      if (DEBUG)
        console.log(`values are ${sortPrimaryInput} and ${sortSecondaryInput}`);
    }
  } catch (error) {
    if (DEBUG) console.log(`executing POST catch block`);
    if (error instanceof Error) {
      console.log(`form error is ${error.message}`);
      console.log(`content type was ${error.name}`);
    }
  }
}

const sortPairsByPrimary = (a: DisplayPair, b: DisplayPair): number => {
  const one = a.primary.general.name;
  const two = b.primary.general.name;
  return one
    .toLocaleLowerCase(undefined)
    .localeCompare(two.toLocaleLowerCase(undefined), undefined, {
      sensitivity: "base",
    });
};

const sortPairsBySecondary = (a: DisplayPair, b: DisplayPair) => {
  const one = a.secondary.general.name;
  const two = b.secondary.general.name;
  return one
    .toLocaleLowerCase(undefined)
    .localeCompare(two.toLocaleLowerCase(undefined), undefined, {
      sensitivity: "base",
    });
};

const sortPairsByEvAnsRank = (a: DisplayPair, b: DisplayPair) => {
  if (a.EvAnsRanking === b.EvAnsRanking) {
    return 0;
  } else if (a.EvAnsRanking < b.EvAnsRanking) {
    return -1;
  }
  return 1;
};

const sortPairSelector: Record<
  sortByOptionsType,
  (a: DisplayPair, b: DisplayPair) => number
> = {
  [sortByOptions.enum.primary]: sortPairsByPrimary,
  [sortByOptions.enum.secondary]: sortPairsBySecondary,
  [sortByOptions.enum.EvAnsRank]: sortPairsByEvAnsRank,
};

const sortPairFunction = (a: DisplayPair, b: DisplayPair) => {
  if (a === undefined) {
    if (b === undefined) {
      return 0;
    } else {
      return 1;
    }
  } else {
    if (b === undefined) {
      return -1;
    }
    if (sortDirection === sortDirectionOptions.enum.decending) {
      return sortPairSelector[sortBy](a, b);
    }
    return sortPairSelector[sortBy](b, a);
  }
};
if (DEBUG) console.log(`# Generals: ${Astro.locals.ExtendedGeneralSet.size}`);
const pairsData = new Array<Array<GeneralPairType>>();
if (Astro.locals.ExtendedGeneralSet.size > 0) {
  for (const tg of Astro.locals.ExtendedGeneralSet) {
    const v1 = ExtendedGeneral.safeParse(tg);
    if (v1.success) {
      const g1 = v1.data.general;
      const pairUrl = new URL(
        `/generalPairs/${g1.name}-${g1.score_as}.json`,
        Astro.url
      );
      const response = await fetch(pairUrl);
      //const response = null;
      if (response !== null && response.ok) {
        const j: GeneralPairType[] = await response.json();
        const validation = z.array(GeneralPair).safeParse(j);
        if (validation.success) {
          pairsData.push(validation.data);
        } else {
          console.log(
            `pair type validation failed: ${validation.error.message}`
          );
        }
      } else {
        console.log(`responce for ${pairUrl.toString()} was not ok`);
      }
    } else {
      console.log(`Astro.locals.ExtendedGeneralSet has invalid general in it.`);
    }
  }

  for (const pd of pairsData.flat()) {
    const validation = GeneralPair.safeParse(pd);
    if (validation.success) {
      const p = new DisplayGeneral(validation.data.primary, myUrl);
      const s = new DisplayGeneral(validation.data.secondary, myUrl);
      pairs.push(new DisplayPair(p, s));
    }
  }
}
pairs.sort(sortPairFunction);
---

<div class="spectrum spectrum--medium">
  <div
    id={name}
    class="spectrum-Table-scroller spectrum-Table spectrum-Table--sizeM spectrum-Table--emphasized"
    style="height: 600px"
  >
    <form name={name} method="POST">
      <div class="spectrum-Table-main" role="table">
        <div class="spectrum-Table-head" role="rowgroup">
          <div role="row">
            <div class="spectrum-Table-headCell" role="columnheader">
              <span class="spectrum-Table-columnTitle">Index</span>
            </div>
            <div
              class:list={["spectrum-Table-headCell", "is-sortable"]}
              role="columnheader"
              aria-sort="descending"
              tabindex="0"
            >
              <button type="submit" name="pGeneral" value={sortPrimaryValue}>
                <span class="spectrum-Table-columnTitle">Primary General</span>
              </button>
            </div>
            <div
              class="spectrum-Table-headCell"
              role="columnheader"
              aria-sort="none"
              tabindex="0"
            >
              <button type="submit" name="sGeneral" value={sortSecondaryValue}>
                <span class="spectrum-Table-columnTitle"
                  >Assistant General
                </span>
              </button>
            </div>
            <div
              class="spectrum-Table-headCell"
              role="columnheader"
              aria-sort="none"
              tabindex="0"
            >
              <button type="submit" name="EvAnsRank" value={sortEvAnsRankValue}>
                <span class="spectrum-Table-columnTitle">Score</span>
              </button>
            </div>
          </div>
        </div>

        <div class="spectrum-Table-body" role="rowgroup">
          {
            pairs.length > 0 &&
              pairs.map(
                (pi, index) =>
                  pi && (
                    <div class="spectrum-Table-row" role="rowgroup">
                      <div class="spectrum-Table-cell" role="cell">
                        {index}
                      </div>
                      <div class="spectrum-Table-cell" role="cell">
                        {pi.primary.general.name}
                      </div>
                      <div class="spectrum-Table-cell" role="cell">
                        {pi.secondary.general.name}
                      </div>
                      <div class="spectrum-Table-cell" role="cell">
                        {pi.EvAnsRanking()}
                      </div>
                    </div>
                  )
              )
          }
        </div>
      </div>
    </form>
  </div>
</div>
<style></style>
