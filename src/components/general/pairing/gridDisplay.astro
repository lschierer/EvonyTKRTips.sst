---
export const prerender = false;

import { z } from "astro:content";

import { FixedWidthParser } from "fixed-width-parser";

import "@spectrum-css/vars/dist/spectrum-global.css";
import "@spectrum-css/vars/dist/spectrum-medium.css";
import "@spectrum-css/button/dist/index.css";
import "@spectrum-css/page/dist/index.css";
import "@spectrum-css/table/dist/index.css";
import "@spectrum-css/icon/dist/index.css";
import "@spectrum-css/ui-icons/dist/medium/Arrow100.svg";

import { delay } from "nanodelay";

import {
  type BuffParamsType,
  GeneralPair,
  type GeneralPairType,
  type ExtendedGeneralType,
  ExtendedGeneralStatus,
AscendingLevels,
} from "@schemas/index";

import GridRow from "./gridRow.astro";
import { sequence } from "astro:middleware";

interface Props {
  name: string;
  InvestmentLevel: BuffParamsType;
  class?: string;
}

const DEBUG = false;

const { name, InvestmentLevel } = Astro.props;

const myUrl = Astro.url;

const sortByOptions = z.enum([
  "primary", 
  "secondary", 
  "EvAnsRank", 
  "AttackRank",
  "DefenseRank",
]);
type sortByOptionsType = z.infer<typeof sortByOptions>;

const sortDirectionOptions = z.enum(["ascending", "descending"]);
type sortDirectionType = z.infer<typeof sortDirectionOptions>;

let sortBy: sortByOptionsType = sortByOptions.enum.primary;
let sortDirection: sortDirectionType = sortDirectionOptions.enum.descending;

let sortPrimaryInput: boolean | sortDirectionType | null = false;
let sortSecondaryInput: boolean | sortDirectionType | null = false;

let sortPrimaryValue: sortDirectionType = sortDirectionOptions.enum.descending;
let sortSecondaryValue: sortDirectionType =
  sortDirectionOptions.enum.descending;

let sortEvAnsRankInput: boolean | sortDirectionType | null = false;
let sortEvAnsRankValue: sortDirectionType =
  sortDirectionOptions.enum.descending;

let sortAttackRankInput: boolean | sortDirectionType | null = false;
let sortAttackRankValue: sortDirectionType =
  sortDirectionOptions.enum.descending;

let sortDefenseRankInput: boolean | sortDirectionType | null = false;
let sortDefenseRankValue: sortDirectionType =
  sortDirectionOptions.enum.descending;

if (DEBUG) {
  console.log(`# locals Generals: ${Astro.locals.ExtendedGenerals.length}`);
}

const pairs = Array<GeneralPairType>();

if (
  Array.isArray(Astro.locals.ExtendedGenerals) && 
  Astro.locals.ExtendedGenerals.length > 0) {
    Astro.locals.ExtendedGenerals.forEach(async (eg1, index) => {
      if(eg1 !== undefined && eg1 !== null ) {
        while(ExtendedGeneralStatus.enum.complete.localeCompare(eg1.status)) {
          await delay(10 * (Astro.locals.ExtendedGenerals.length - index))
        }
      }
    })
}
if(Array.isArray(Astro.locals.CachedPairs) &&
  Astro.locals.CachedPairs.length > 0) {
    Astro.locals.CachedPairs.forEach((thisPair: GeneralPairType) => {
      if(thisPair.EvAnsRanking === 0) {
        let ep = 0;
        let es = 0;
        const primary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((g) => {
          if(!(thisPair.primary as string).localeCompare((g as ExtendedGeneralType).general.name)) {
            return true;
          }
          return false;
        })
        if(primary !== undefined) {
          ep = primary.computedBuffs.get(Astro.locals.InvestmentOptions2Key(InvestmentLevel))?.EvAns ?? -1;
        }
        const secondary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((g) => {
          if(!(thisPair.secondary as string).localeCompare((g as ExtendedGeneralType).general.name)) {
            return true;
          }
          return false;
        })
        if(secondary !== undefined) {
          const assistLevel: BuffParamsType = {
            special1: InvestmentLevel.special1,
            special2: InvestmentLevel.special2,
            special3: InvestmentLevel.special3,
            special4: InvestmentLevel.special4,
            special5: InvestmentLevel.special5,
            stars: AscendingLevels.enum[0],
            dragon: InvestmentLevel.dragon,
            beast: InvestmentLevel.beast,
          }
          const sKey = Astro.locals.InvestmentOptions2Key(assistLevel)
          es = secondary.computedBuffs.get(sKey)?.EvAns ?? -1;
        }
        thisPair.EvAnsRanking = ep + es;
      }
      pairs.push(thisPair)
    })
  }

const sortPairsByPrimary = (a: GeneralPairType, b: GeneralPairType): number => {
  return a.primary.localeCompare(b.primary, undefined, { sensitivity: "base" });
};

const sortPairsBySecondary = (
  a: GeneralPairType,
  b: GeneralPairType
): number => {
  return a.secondary.localeCompare(b.secondary, undefined, {
    sensitivity: "base",
  });
};

const sortPairsByEvAnsRank = (
  a: GeneralPairType,
  b: GeneralPairType
): number => {
  const Aprimary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !a.primary.localeCompare(element.general.name)
  })
  const Asecondary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !a.secondary.localeCompare(element.general.name)
  });
  const Bprimary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !b.primary.localeCompare(element.general.name)
  });
  const Bsecondary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !b.secondary.localeCompare(element.general.name)
  });

  const assistInvest: BuffParamsType = {
    special1: InvestmentLevel.special1,
    special2: InvestmentLevel.special2,
    special3: InvestmentLevel.special3,
    special4: InvestmentLevel.special4,
    special5: InvestmentLevel.special5,
    stars: AscendingLevels.enum[0],
    dragon: InvestmentLevel.dragon,
    beast: InvestmentLevel.beast
  }

  const pKey = Astro.locals.InvestmentOptions2Key(InvestmentLevel);
  const sKey = Astro.locals.InvestmentOptions2Key(assistInvest)

  if(DEBUG){
    console.log(`pKey: ${pKey}`)
    console.log(`sKey: ${sKey}`)
  }

  const apr =
    Aprimary.computedBuffs.get(pKey)?.EvAns ?? -1;
  const asr =
    Asecondary.computedBuffs.get(sKey)?.EvAns ?? -2;

  const bpr =
    Bprimary.computedBuffs.get(pKey)?.EvAns ?? -3;
  const bsr =
    Bsecondary.computedBuffs.get(sKey)?.EvAns ?? -4;
    

  const apt = apr + asr;
  const bpt = bpr + bsr;
  if (DEBUG) {
    console.log(
      `a.primary computed buffs: ${JSON.stringify(Array.from(Aprimary.computedBuffs))}`
    );
    console.log(
      `a.primary: ${a.primary}: ${apr}\ta.secondary: ${a.secondary}: ${asr}\ta: ${apt}`
    );
    console.log(
      `b.primary: ${b.primary}: ${bpr}\tb.secondary: ${b.secondary}: ${bsr}\tb: ${bpt}`
    );
  }
  if (apt === bpt) {
    return 0;
  } else if (apt < bpt) {
    return -1;
  } else {
    return 1;
  }
};

const sortPairsAttackRank = (a: GeneralPairType, b: GeneralPairType): number => {
  const Aprimary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !a.primary.localeCompare(element.general.name)
  })
  const Asecondary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !a.secondary.localeCompare(element.general.name)
  });
  const Bprimary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !b.primary.localeCompare(element.general.name)
  });
  const Bsecondary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !b.secondary.localeCompare(element.general.name)
  });

  const assistInvest: BuffParamsType = {
    special1: InvestmentLevel.special1,
    special2: InvestmentLevel.special2,
    special3: InvestmentLevel.special3,
    special4: InvestmentLevel.special4,
    special5: InvestmentLevel.special5,
    stars: AscendingLevels.enum[0],
    dragon: InvestmentLevel.dragon,
    beast: InvestmentLevel.beast
  }

  const pKey = Astro.locals.InvestmentOptions2Key(InvestmentLevel);
  const sKey = Astro.locals.InvestmentOptions2Key(assistInvest)

  if(DEBUG){
    console.log(`pKey: ${pKey}`)
    console.log(`sKey: ${sKey}`)
  }

  const apr =
    Aprimary.computedBuffs.get(pKey)?.AttackRank ?? -1;
  const asr =
    Asecondary.computedBuffs.get(sKey)?.AttackRank ?? -2;

  const bpr =
    Bprimary.computedBuffs.get(pKey)?.AttackRank ?? -3;
  const bsr =
    Bsecondary.computedBuffs.get(sKey)?.AttackRank ?? -4;

  const apt = apr + asr;
  const bpt = bpr + bsr;
  if (DEBUG) {
    console.log(
      `a.p computed buffs: ${JSON.stringify(Array.from(Aprimary.computedBuffs))}`
    );
    console.log(
      `a.s computed buffs: ${JSON.stringify(Array.from(Asecondary.computedBuffs))}`
    );
    console.log(
      `a.primary: ${a.primary}: ${apr}\ta.secondary: ${a.secondary}: ${asr}\ta: ${apt}`
    );
    console.log(
      `b.p computed buffs: ${JSON.stringify(Array.from(Bprimary.computedBuffs))}`
    );
    console.log(
      `b.s computed buffs: ${JSON.stringify(Array.from(Bsecondary.computedBuffs))}`
    );
    console.log(
      `b.primary: ${b.primary}: ${bpr}\tb.secondary: ${b.secondary}: ${bsr}\tb: ${bpt}`
    );
    console.log('')
  }
  if (apt === bpt) {
    return 0;
  } else if (apt < bpt) {
    return -1;
  } else {
    return 1;
  }
}

const sortPairsDefenseRank = (a: GeneralPairType, b: GeneralPairType): number => {
  const Aprimary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !a.primary.localeCompare(element.general.name)
  })
  const Asecondary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !a.secondary.localeCompare(element.general.name)
  });
  const Bprimary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !b.primary.localeCompare(element.general.name)
  });
  const Bsecondary: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
    return !b.secondary.localeCompare(element.general.name)
  });

  const assistInvest: BuffParamsType = {
    special1: InvestmentLevel.special1,
    special2: InvestmentLevel.special2,
    special3: InvestmentLevel.special3,
    special4: InvestmentLevel.special4,
    special5: InvestmentLevel.special5,
    stars: AscendingLevels.enum[0],
    dragon: InvestmentLevel.dragon,
    beast: InvestmentLevel.beast
  }

  const pKey = Astro.locals.InvestmentOptions2Key(InvestmentLevel);
  const sKey = Astro.locals.InvestmentOptions2Key(assistInvest)

  if(DEBUG){
    console.log(`pKey: ${pKey}`)
    console.log(`sKey: ${sKey}`)
  }

  const apr =
    Aprimary.computedBuffs.get(pKey)?.DefenseRank ?? -1;
  const asr =
    Asecondary.computedBuffs.get(sKey)?.DefenseRank ?? -2;

  const bpr =
    Bprimary.computedBuffs.get(pKey)?.DefenseRank ?? -3;
  const bsr =
    Bsecondary.computedBuffs.get(sKey)?.DefenseRank ?? -4;

  const apt = apr + asr;
  const bpt = bpr + bsr;
  if (DEBUG) {
    console.log(
      `a.p computed buffs: ${JSON.stringify(Array.from(Aprimary.computedBuffs))}`
    );
    console.log(
      `a.s computed buffs: ${JSON.stringify(Array.from(Asecondary.computedBuffs))}`
    );
    console.log(
      `a.primary: ${a.primary}: ${apr}\ta.secondary: ${a.secondary}: ${asr}\ta: ${apt}`
    );
    console.log(
      `b.p computed buffs: ${JSON.stringify(Array.from(Bprimary.computedBuffs))}`
    );
    console.log(
      `b.s computed buffs: ${JSON.stringify(Array.from(Bsecondary.computedBuffs))}`
    );
    console.log(
      `b.primary: ${b.primary}: ${bpr}\tb.secondary: ${b.secondary}: ${bsr}\tb: ${bpt}`
    );
    console.log('')
  }
  if (apt === bpt) {
    return 0;
  } else if (apt < bpt) {
    return -1;
  } else {
    return 1;
  }
}

const sortPairSelector: Record<
  sortByOptionsType,
  (a: GeneralPairType, b: GeneralPairType) => number
> = {
  [sortByOptions.enum.primary]: sortPairsByPrimary,
  [sortByOptions.enum.secondary]: sortPairsBySecondary,
  [sortByOptions.enum.EvAnsRank]: sortPairsByEvAnsRank,
  [sortByOptions.enum.AttackRank]: sortPairsAttackRank,
  [sortByOptions.enum.DefenseRank]: sortPairsDefenseRank,
};

const sortPairFunction = (a: GeneralPairType, b: GeneralPairType) => {
  if (a === undefined) {
    if (b === undefined) {
      return 0;
    } else {
      return 1;
    }
  } else if (b === undefined) {
    return -1;
  } else {
    if (!sortDirection.localeCompare(sortDirectionOptions.enum.descending)) {
      return sortPairSelector[sortBy](a, b);
    } else {
      return sortPairSelector[sortBy](b, a);
    }
  }
};

if (Astro.request.method === "POST") {
  try {
    if (DEBUG) console.log(`executing POST try block`);
    await Promise.all(Astro.locals.ExtendedGenerals.map(async (g: ExtendedGeneralType) => {
        if (DEBUG) {
          console.log(`${g.general.name}: ${g.status}`);
        }
        let iterationCount = 0;
        while(g.status.localeCompare(ExtendedGeneralStatus.enum.complete) && iterationCount < 3) {
          await delay(10 * ++iterationCount).then(() => {
            if(DEBUG) {
              console.log(`${g.general.name} status ${g.status} ${iterationCount}`)
            }
          })
        }
     }))
    const data = await Astro.request.formData();
    if (sortPrimaryInput === false) {
      //not prievously sorted by primary
      const v = sortDirectionOptions.safeParse(data.get("pGeneral"));
      if (v.success) {
        if (DEBUG) console.log(`sortPrimaryInput was false, is now ${v.data}`);
        sortPrimaryInput = true;
        sortSecondaryInput = false;
        sortEvAnsRankInput = false;
        sortBy = sortByOptions.enum.primary;
        sortDirection = v.data;
        if (sortDirection === sortDirectionOptions.enum.ascending) {
          sortPrimaryValue = sortDirectionOptions.enum.descending;
        } else {
          sortPrimaryValue = sortDirectionOptions.enum.ascending;
        }
      }
    } else {
      if (DEBUG)
        console.log(`values are ${sortPrimaryInput} and ${sortSecondaryInput}`);
    }
    if (sortSecondaryInput === false) {
      //not prievously sorted by primary
      const v = sortDirectionOptions.safeParse(data.get("sGeneral"));
      if (v.success) {
        if (DEBUG)
          console.log(`sortSecondaryInput was false, is now ${v.data}`);
        sortSecondaryInput = true;
        sortPrimaryInput = false;
        sortEvAnsRankInput = false;
        sortBy = sortByOptions.enum.secondary;
        sortDirection = v.data;
        if (sortDirection === sortDirectionOptions.enum.ascending) {
          sortSecondaryValue = sortDirectionOptions.enum.descending;
        } else {
          sortSecondaryValue = sortDirectionOptions.enum.ascending;
        }
      }
      if (sortEvAnsRankInput === false) {
        //not previously sorted by EvAnsRank
        const v = sortDirectionOptions.safeParse(data.get("EvAnsRank"));
        if (v.success) {
          if (DEBUG) {
            console.log(`sortEvAnsRankInput was false, is now ${v.data}`);
          }
          sortEvAnsRankInput = true;
          sortPrimaryInput = false;
          sortSecondaryInput = false;
          sortBy = sortByOptions.enum.EvAnsRank;
          sortDirection = v.data;
          if (sortDirection === sortDirectionOptions.enum.ascending) {
            sortEvAnsRankValue = sortDirectionOptions.enum.descending;
          } else {
            sortEvAnsRankValue = sortDirectionOptions.enum.ascending;
          }
        }
      }
      if (sortAttackRankInput === false) {
        //not previously sorted by EvAnsRank
        const v = sortDirectionOptions.safeParse(data.get("AttackRank"));
        if (v.success) {
          if (DEBUG) {
            console.log(`sortAttackRankInput was false, is now ${v.data}`);
          }
          sortAttackRankInput = true;
          sortEvAnsRankInput = false;
          sortBy = sortByOptions.enum.AttackRank;
          sortDirection = v.data;
          if (sortDirection === sortDirectionOptions.enum.ascending) {
            sortAttackRankValue = sortDirectionOptions.enum.descending;
          } else {
            sortAttackRankValue = sortDirectionOptions.enum.ascending;
          }
        }
      }
      if (sortDefenseRankInput === false) {
        //not previously sorted by EvAnsRank
        const v = sortDirectionOptions.safeParse(data.get("AttackRank"));
        if (v.success) {
          if (DEBUG) {
            console.log(`sortAttackRankInput was false, is now ${v.data}`);
          }
          sortDefenseRankInput = true;
          sortBy = sortByOptions.enum.DefenseRank;
          sortDirection = v.data;
          if (sortDirection === sortDirectionOptions.enum.ascending) {
            sortAttackRankValue = sortDirectionOptions.enum.descending;
          } else {
            sortAttackRankValue = sortDirectionOptions.enum.ascending;
          }
        }
      }
    } else {
      if (DEBUG)
        console.log(
          `values are ${sortPrimaryInput}  ${sortSecondaryInput} ${sortEvAnsRankInput} ${sortAttackRankInput}`
        );
    }
  } catch (error) {
    if (DEBUG) console.log(`executing POST catch block`);
    if (error instanceof Error) {
      console.log(`form error is ${error.message}`);
      console.log(`content type was ${error.name}`);
    }
  }
}

let pairArray = [...pairs].sort(sortPairFunction);
---

<div class="spectrum spectrum--medium">
  <div
    id={name}
    class="spectrum-Table-scroller spectrum-Table spectrum-Table--sizeM spectrum-Table--emphasized"
    style="height: 600px"
  >
    <form name={name} method="POST">
      <div class="spectrum-Table-main" role="table">
        <div class="spectrum-Table-head" role="rowgroup">
          <div role="row">
            <div class="spectrum-Table-headCell" role="columnheader">
              <span class="spectrum-Table-columnTitle">Index</span>
            </div>
            <div
              class:list={["spectrum-Table-headCell", "is-sortable"]}
              role="columnheader"
              aria-sort={sortDirection}
              tabindex="0"
            >
              <button 
                type="submit" 
                name="pGeneral" 
                value={sortPrimaryValue}
                class="spectrum-Button spectrum-Button--outline spectrum-Button--primary spectrum-Button--sizeM"
              >
                <span class="spectrum-Table-columnTitle">Primary General</span>
              </button>
            </div>
            <div
              class="spectrum-Table-headCell"
              role="columnheader"
              aria-sort={sortDirection}
              tabindex="0"
            >
              <button 
                type="submit" 
                name="sGeneral" 
                value={sortSecondaryValue}
                class="spectrum-Button spectrum-Button--outline spectrum-Button--primary spectrum-Button--sizeM"
                >
                <span class="spectrum-Table-columnTitle"
                  >Assistant General
                </span>
              </button>
            </div>
            <div
              id="EvAnsRank"
              class="spectrum-Table-headCell"
              role="columnheader"
              aria-sort={sortDirection}
              tabindex="0"
            >
              <button 
                type="submit" 
                name="EvAnsRank" 
                value={sortEvAnsRankValue}
                class="spectrum-Button spectrum-Button--outline spectrum-Button--primary spectrum-Button--sizeM"
                >
                <span class="spectrum-Table-columnTitle">EvAns Score</span>
              </button>
            </div>
            <div
              id="AttackRank"
              class="spectrum-Table-headCell"
              role="columnheader"
              aria-sort={sortDirection}
              tabindex="0"
            >
              <button 
                type="submit" 
                name="AttackRank" 
                value={sortAttackRankValue}
                class="spectrum-Button spectrum-Button--outline spectrum-Button--primary spectrum-Button--sizeM"
                >
                <span class="spectrum-Table-columnTitle">TKRTips Attack Score</span>
              </button>
            </div>
            <div
              id="DefenseRank"
              class="spectrum-Table-headCell"
              role="columnheader"
              aria-sort={sortDirection}
              tabindex="0"
            >
              <button 
                type="submit" 
                name="DefenseRank" 
                value={sortAttackRankValue}
                class="spectrum-Button spectrum-Button--outline spectrum-Button--primary spectrum-Button--sizeM"
                >
                <span class="spectrum-Table-columnTitle">TKRTips Defense Score</span>
              </button>
            </div>
          </div>
        </div>

        <div class="spectrum-Table-body" role="rowgroup">
          {
            pairArray.length > 0 &&
              pairArray.map((pi, index) => (
                <GridRow
                  index={index}
                  primary={pi.primary}
                  secondary={pi.secondary}
                  InvestmentLevel={InvestmentLevel}
                />
              ))
          }
        </div>
      </div>
    </form>
  </div>
</div>
<style>
  
  div#EvAnsRank,
  div#AttackRank {
    width: 6em;
  }
  .spectrum-Table-columnTitle {
    text-wrap: wrap;
  }
</style>
