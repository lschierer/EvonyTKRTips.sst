---
export const prerender = false;

import { z } from "astro:content";

import { FixedWidthParser } from 'fixed-width-parser';

import "@spectrum-css/vars/dist/spectrum-global.css";
import "@spectrum-css/vars/dist/spectrum-medium.css";
import "@spectrum-css/page/dist/index.css";
import "@spectrum-css/table/dist/index.css";
import "@spectrum-css/icon/dist/index.css";
import "@spectrum-css/ui-icons/dist/medium/Arrow100.svg";

import { delay } from 'nanodelay'


import {
  BuffParams,
  type BuffParamsType,
  ExtendedGeneral,
  GeneralElement,
  type GeneralElementType,
  GeneralPair,
  type GeneralPairType,
  GeneralClass,
  generalUseCase,
  qualityColor,
  AscendingLevels,
  type ExtendedGeneralType,
Display,
ExtendedGeneralStatus,
} from "@schemas/index";

import GridRow from './gridRow.astro';

interface Props {
  name: string;
  InvestmentLevel: BuffParamsType;
  class?: string;
}

const DEBUG = true;

const { name, InvestmentLevel } = Astro.props;

const myUrl = Astro.url;

const sortByOptions = z.enum(["primary", "secondary", "EvAnsRank"]);
type sortByOptionsType = z.infer<typeof sortByOptions>;

const sortDirectionOptions = z.enum(["ascending", "descending"]);
type sortDirectionType = z.infer<typeof sortDirectionOptions>;

let sortBy: sortByOptionsType = sortByOptions.enum.primary;
let sortDirection: sortDirectionType = sortDirectionOptions.enum.descending;

let sortPrimaryInput: boolean | sortDirectionType | null = false;
let sortSecondaryInput: boolean | sortDirectionType | null = false;

let sortPrimaryValue: sortDirectionType = sortDirectionOptions.enum.descending;
let sortSecondaryValue: sortDirectionType = sortDirectionOptions.enum.descending;

let sortEvAnsRankInput: boolean | sortDirectionType | null = false;
let sortEvAnsRankValue: sortDirectionType = sortDirectionOptions.enum.descending;

if (Astro.request.method === "POST") {
  try {
    if (DEBUG) console.log(`executing POST try block`);
    const data = await Astro.request.formData();
    if (sortPrimaryInput === false) {
      //not prievously sorted by primary
      const v = sortDirectionOptions.safeParse(data.get("pGeneral"));
      if (v.success) {
        if (DEBUG) console.log(`sortPrimaryInput was false, is now ${v.data}`);
        sortPrimaryInput = true;
        sortSecondaryInput = false;
        sortEvAnsRankInput = false;
        sortBy = sortByOptions.enum.primary;
        sortDirection = v.data;
        if (sortDirection === sortDirectionOptions.enum.ascending) {
          sortPrimaryValue = sortDirectionOptions.enum.descending;
        } else {
          sortPrimaryValue = sortDirectionOptions.enum.ascending;
        }
      }
    } else {
      if (DEBUG)
        console.log(`values are ${sortPrimaryInput} and ${sortSecondaryInput}`);
    }
    if (sortSecondaryInput === false) {
      //not prievously sorted by primary
      const v = sortDirectionOptions.safeParse(data.get("sGeneral"));
      if (v.success) {
        if (DEBUG)
          console.log(`sortSecondaryInput was false, is now ${v.data}`);
        sortSecondaryInput = true;
        sortPrimaryInput = false;
        sortEvAnsRankInput = false;
        sortBy = sortByOptions.enum.secondary;
        sortDirection = v.data;
        if (sortDirection === sortDirectionOptions.enum.ascending) {
          sortSecondaryValue = sortDirectionOptions.enum.descending;
        } else {
          sortSecondaryValue = sortDirectionOptions.enum.ascending;
        }
      }
      if(sortEvAnsRankInput === false) {
        //not previously sorted by EvAnsRank
        const v = sortDirectionOptions.safeParse(data.get("EvAnsRank"));
        if (v.success) {
          
          if(DEBUG) { console.log(`sortEvAnsRankInput was false, is now ${v.data}`)}
          sortEvAnsRankInput = true;
          sortPrimaryInput = false;
          sortSecondaryInput = false;
          sortBy = sortByOptions.enum.EvAnsRank;
          sortDirection = v.data;
          if(sortDirection === sortDirectionOptions.enum.ascending) {
            sortEvAnsRankValue = sortDirectionOptions.enum.descending;
          } else {
            sortEvAnsRankValue = sortDirectionOptions.enum.ascending;
          }
        }
      }
    } else {
      if (DEBUG)
        console.log(`values are ${sortPrimaryInput}  ${sortSecondaryInput} ${sortEvAnsRankInput}`);
    }
  } catch (error) {
    if (DEBUG) console.log(`executing POST catch block`);
    if (error instanceof Error) {
      console.log(`form error is ${error.message}`);
      console.log(`content type was ${error.name}`);
    }
  }
}




if (DEBUG) {
  console.log(`# locals Generals: ${Astro.locals.ExtendedGeneralMap.size}`);
  
}
  
const pairs = Array<GeneralPairType>();

if (Astro.locals.ExtendedGeneralMap.size > 0) {
  for await (const eg1 of Astro.locals.ExtendedGeneralMap.values()) {
    if(eg1 === undefined || eg1 === null) {
      continue;
    } else if (eg1.general === undefined || eg1.general === null ) {
      continue;
    }
    if(DEBUG) console.log(`eg1 is ${eg1.general.name}`)
    const pairsData = new Array<GeneralPairType>();
    
    const pairUrl = new URL(
      `/generalPairs/${eg1.general.name}-${eg1.general.score_as}.json`,
      Astro.url
    );
    
    if(DEBUG) {console.log(`about to fetch ${pairUrl}`)}
    const response = await fetch(pairUrl);
    if (response !== null && response.ok) {
      const jr: Array<GeneralPairType> = await response.json();
        const jrv = z.array(GeneralPair).safeParse(jr);
        if(jrv.success) {
          pairsData.push(...jrv.data)
        } else {
          console.log(`pair type validation failed: ${jrv.error.message}`)
          console.log(JSON.stringify(jr))
        }
    } else {
      console.log(`responce for ${pairUrl.toString()} was not ok`)
    }

    if(pairsData.length > 0) {
      if(DEBUG) {
        console.log(`pairsdata: ${pairsData.length}`)
      }
      pairsData.forEach((pi) => {
        pairs.push(pi);
      })
    }
  };
}

const sortPairsByPrimary = (a:GeneralPairType, b:GeneralPairType): number => {
  return (a.primary.localeCompare(b.primary, undefined, {sensitivity: 'base'}))
}

const sortPairsBySecondary = (a:GeneralPairType, b:GeneralPairType): number => {
  return (a.secondary.localeCompare(b.secondary, undefined, {sensitivity: 'base'}))
}

const sortPairsByEvAnsRank = (a:GeneralPairType, b:GeneralPairType): number => {
  const apr = Astro.locals.EvAnsBuff(a.primary, Display.enum.primary, InvestmentLevel)
  const bpr = Astro.locals.EvAnsBuff(b.primary, Display.enum.primary, InvestmentLevel)
  
  const asr = Astro.locals.EvAnsBuff(a.secondary, Display.enum.assistant, InvestmentLevel)
  const bsr = Astro.locals.EvAnsBuff(b.secondary, Display.enum.assistant, InvestmentLevel)

  const apt = (apr + asr)
  const bpt = (bpr + bsr)
  if(DEBUG) {
    console.log(`a.primary: ${a.primary}: ${apr}\ta.secondary: ${a.secondary}: ${asr}\ta: ${apt}`)
    console.log(`b.primary: ${b.primary}: ${bpr}\tb.secondary: ${b.secondary}: ${bsr}\tb: ${bpt}`)
  }
  if(apt === bpt) {
    return 0
  } else if (apt < bpt) {
    return -1
  } else {
    return 1
  }
}

const sortPairSelector: Record<sortByOptionsType, (a:GeneralPairType, b:GeneralPairType) => number> = {
  [sortByOptions.enum.primary]: sortPairsByPrimary,
  [sortByOptions.enum.secondary]: sortPairsBySecondary,
  [sortByOptions.enum.EvAnsRank]: sortPairsByEvAnsRank,
}

const sortPairFunction = (a:GeneralPairType, b:GeneralPairType) => {
  if(DEBUG) {
    console.log(`sortBy: ${sortBy}`)
  }
  if(a === undefined) {
    if(b === undefined) {
      return 0;
    } else {
      return 1;
    }
  } else if (b === undefined) {
    return -1
  } else {
    if(!sortDirection.localeCompare(sortDirectionOptions.enum.descending)) {
      return sortPairSelector[sortBy](a, b);
    } else {
      return sortPairSelector[sortBy](b, a);
    }
  }
}

let pairArray = [...pairs].sort(sortPairFunction);


---

<div class="spectrum spectrum--medium">
  <div
    id={name}
    class="spectrum-Table-scroller spectrum-Table spectrum-Table--sizeM spectrum-Table--emphasized"
    style="height: 600px"
  >
    <form name={name} method="POST">
      <div class="spectrum-Table-main" role="table">
        <div class="spectrum-Table-head" role="rowgroup">
          <div role="row">
            <div class="spectrum-Table-headCell" role="columnheader">
              <span class="spectrum-Table-columnTitle">Index</span>
            </div>
            <div
              class:list={["spectrum-Table-headCell", "is-sortable"]}
              role="columnheader"
              aria-sort={sortDirection}
              tabindex="0"
            >
              <button type="submit" name="pGeneral" value={sortPrimaryValue}>
                <span class="spectrum-Table-columnTitle">Primary General</span>
              </button>
            </div>
            <div
              class="spectrum-Table-headCell"
              role="columnheader"
              aria-sort="none"
              tabindex="0"
            >
              <button type="submit" name="sGeneral" value={sortSecondaryValue}>
                <span class="spectrum-Table-columnTitle"
                  >Assistant General
                </span>
              </button>
            </div>
            <div
              class="spectrum-Table-headCell"
              role="columnheader"
              aria-sort="none"
              tabindex="0"
            >
              <button type="submit" name="EvAnsRank" value={sortEvAnsRankValue}>
                <span class="spectrum-Table-columnTitle">Score</span>
              </button>
            </div>
          </div>
        </div>

        <div class="spectrum-Table-body" role="rowgroup">
          {
            pairArray.length > 0 &&
            pairArray.map(
                (pi, index) => (
                  <GridRow
                    index={index}
                    primary={pi.primary} 
                    secondary={pi.secondary} 
                    InvestmentLevel={InvestmentLevel}
                  ></GridRow>
                )
              )
          }
        </div>
      </div>
    </form>
  </div>
</div>
<style></style>
