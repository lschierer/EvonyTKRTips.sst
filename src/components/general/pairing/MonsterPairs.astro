---
import { getCollection, type CollectionEntry } from "astro:content";
import type { ComponentProps } from "astro/types";

import { z, type ZodError } from "zod";
import GridDisplay from "../gridDisplay/gridDisplay.astro";
type GridDisplayProps = ComponentProps<typeof GridDisplay>;

import {
  ConflictArray,
  type ConflictArrayType,
  GeneralArray,
  type GeneralArrayType,
  generalConflicts,
  GeneralElement,
  type GeneralElementType,
  generalUseCase,
  ClassEnum,
  type ConflictDatumType,
ConflictDatum,
} from "@schemas/index.ts";

const dataUrl = new URL("/generals/all.json", Astro.url);
const conflictData = new URL("/generalConflictData/conflicts.json", Astro.url);

let allGeneralsJson = "";
let allGenerals = new Array<GeneralElementType>();

let allConflicts = new Array<ConflictDatumType>();
let allConflictsJson = "";


const generalObjects: CollectionEntry<"generals">[] =
  await getCollection("generals");

if (generalObjects !== null && generalObjects !== undefined) {
  let generalIterator = generalObjects.values();

  for (const v of generalIterator) {
    const validation = GeneralElement.safeParse(v.data);
    if (validation.success) {
      if (validation.data.general.score_as === ClassEnum.enum.Mounted) {
        allGenerals.push(validation.data);
      }
    } else {
      console.error(`bad validation ${validation.error}`);
    }
  }
  allGeneralsJson = JSON.stringify(allGenerals);
}

let aresult:
  | { success: true; data: GeneralArrayType }
  | { success: false; error: ZodError } = GeneralArray.safeParse(
  JSON.parse(allGeneralsJson)
);
if (aresult.success ) {
  console.log(`validation passed`);
  if(! (aresult.data !== undefined && aresult.data !== null && aresult.data.length > 1)) {
    console.error(`but I have no data`);
  }
} else {
  console.error(aresult.error);
}

const ConflictObjects: CollectionEntry<"generalConflictData">[] =
  await getCollection("generalConflictData");

if (ConflictObjects !== null && ConflictObjects !== undefined) {
  let conflictIterator = ConflictObjects.values();

  for (const v of conflictIterator) {
    const validation = ConflictDatum.safeParse(v.data);
    if (validation.success) {
      allConflicts.push(validation.data);
    } else {
      console.error(`bad validation ${validation.error}`);
    }
  }
  allConflictsJson = JSON.stringify(allConflicts);
}

let cresult:
  | { success: true; data: ConflictArrayType }
  | { success: false; error: ZodError } = ConflictArray.safeParse(JSON.parse(allConflictsJson));
if (cresult.success) {
  console.log(`validation passed`);
  if (cresult.data !== undefined && cresult.data !== null) {
    console.log(`and has data`);
    if(! (cresult.data !== undefined && cresult.data !== null && cresult.data.length > 1)) {
    console.error(`but I have no data`);
  }
  }
} else {
  console.error(cresult.error);
}

---

<div class="table-container">
  <GridDisplay allGenerals={allGenerals} allConflicts={allConflicts} />
</div>

<style>
  .table-container {
    display: block;
    flex: 2 0 auto;
    
  }
</style>
