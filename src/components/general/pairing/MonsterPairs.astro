---
import { getCollection, type CollectionEntry } from "astro:content";

import { z, type ZodError } from "zod";
import { GridDisplay } from "../gridDisplay/gridDisplay";
import {
  type generalInvestment,
  type generalTypeAndUse,
  primaryInvestmentMap,
  secondaryInvestmentMap,
  typeAndUseMap,
} from "./selectionStore.ts";

import {
  conflictingGenerals,
  conflictRecords,
} from "./ConflictingSkillExcludes.ts";

import { allGenerals, generalPairs } from "./generals.ts";

import {
  GeneralArray,
  type GeneralArrayType,
  generalConflicts,
  GeneralElement,
  type GeneralElementType,
ClassEnum,
} from "@schemas/index";

import { Book, type BookType } from "@schemas/bookSchemas.ts";

import {
  ConflictArray,
  type ConflictArrayType,
} from "@schemas/conflictSchemas.ts";

import { PairingPage } from "./index";

const dataUrl = new URL("/generals/all.json", Astro.url);
const conflictData = new URL("/generalConflictData/conflicts.json", Astro.url);

let allGeneralsJson = "";
const generalObjects: CollectionEntry<"generals">[] =
  await getCollection("generals");
if (generalObjects !== null && generalObjects !== undefined) {
  let generalIterator = generalObjects.values();
  let allGenerals = new Array<GeneralElementType>();
  for (const v of generalIterator) {
    const validation = GeneralElement.safeParse(v.data);
    if (validation.success) {
      if (validation.data.general.score_as === ClassEnum.enum.Mounted) {
        allGenerals.push(validation.data);
      }
    } else {
      console.error(`bad validation ${validation.error}`);
    }
  }
  allGeneralsJson = JSON.stringify(allGenerals);
}

let result:
  | { success: true; data: GeneralArrayType | ConflictArrayType }
  | { success: false; error: ZodError } = GeneralArray.safeParse(
  JSON.parse(allGeneralsJson)
);
let allGeneralsData: string | null = null;
if (result.success) {
  console.log(`validation passed`);
  if (result.data !== undefined && result.data !== null) {
    console.log(`and has data`);
    allGeneralsData = JSON.stringify(result.data);
  }
} else {
  console.error(result.error);
}

let allConflictJson = "";
const collectionArray: CollectionEntry<"generalConflictData">[] =
  await getCollection("generalConflictData");
if (collectionArray !== null && collectionArray !== undefined) {
  let result = collectionArray.map((ca) => {
    const validation = generalConflicts.safeParse(ca.data);
    if (validation.success) {
      return validation.data;
    } else {
      console.error(`bad validation ${validation.error}`);
    }
  });
  allConflictJson = JSON.stringify(result);
}

result = ConflictArray.safeParse(JSON.parse(allConflictJson));
let allConflictData: string | null = null;
if (result.success) {
  if (result.data !== undefined && result.data !== null) {
    allConflictData = JSON.stringify(result.data);
  }
} else {
  console.error(result.error);
}
---
<div class="sp-table-container">
  <script>
    import { allGenerals } from "./generals";
    import {
      conflictRecords,
    } from "./ConflictingSkillExcludes";

    import {
      type GeneralElementType,
      type ConflictArrayType,
      type ConflictDatumType,
    } from "@schemas/index";

    class Stores extends HTMLElement {

      public allGenerals: GeneralElementType[] = new Array<GeneralElementType>();

      public conflictRecords: ConflictArrayType = new Array<ConflictDatumType>();

      constructor() {
        super();

        const allGeneralsData = this.dataset.agd;
        const allConflictData = this.dataset.acd;

        if (allGeneralsData !== null && allGeneralsData !== undefined) {
          this.allGenerals = [...JSON.parse(allGeneralsData)];
        } else {
          console.log(`dataset agd was null or undefined`);
        }

        if (allConflictData !== null && allConflictData !== undefined) {
          this.conflictRecords = [...JSON.parse(allConflictData)];
        } else {
          console.log(`dataset acd was null or undefined`);
        }
      }
    }
    customElements.define("astro-stores", Stores);
  </script>
  <GridDisplay client:only="lit" >
    {
      allGeneralsData && allConflictData && (
        <astro-stores slot="astro-store" data-acd={allConflictData} data-agd={allGeneralsData} />
      )
    }
  </GridDisplay>

</div>

<style>
  .sp-table-container {
    display: block;
    flex: 2 0 auto;
    min-height: calc(var(--spectrum-global-dimension-size-6000) * 2);
  }
</style>
