---

import { getCollection, type CollectionEntry } from "astro:content";
import type { ComponentProps } from "astro/types";

import { type ZodError } from "zod";
import { ulid } from "ulidx";
import GridDisplay from "../gridDisplay/gridDisplay.astro";
type GridDisplayProps = ComponentProps<typeof GridDisplay>;

import {
  GeneralArray,
  type GeneralArrayType,
  GeneralElement,
  type GeneralElementType,
  ClassEnum,
} from "@schemas/index";

const DEBUG = false;

const table_name = `${Astro.url.pathname}-${ulid()}`

let allGeneralsJson = "";
let allGenerals = new Array<GeneralElementType>();

const generalObjects: CollectionEntry<"generals">[] =
  await getCollection("generals");

if (generalObjects !== null && generalObjects !== undefined) {
  let generalIterator = generalObjects.values();

  for (const v of generalIterator) {
    const validation = GeneralElement.safeParse(v.data);
    if (validation.success) {
      if (validation.data.general.score_as === ClassEnum.enum.Siege) {
        allGenerals.push(validation.data);
      }
    } else {
      console.error(`bad validation ${validation.error.message}`);
    }
  }
  allGeneralsJson = JSON.stringify(allGenerals);
}

let aresult:
  | { success: true; data: GeneralArrayType }
  | { success: false; error: ZodError } = GeneralArray.safeParse(
  JSON.parse(allGeneralsJson)
);
if (aresult.success ) {
  if (DEBUG) console.log(`validation passed`);
  if(! (aresult.data !== undefined && aresult.data !== null && aresult.data.length > 1)) {
    console.error(`but I have no data`);
  }
} else {
  console.error(aresult.error);
}

---

<div class="table-container">
  <GridDisplay 
    name={table_name} 
    allGenerals={allGenerals} 
    
  ></GridDisplay>
</div>

<style>
  .table-container {
    display: block;
    flex: 2 0 auto;
    
  }
</style>
