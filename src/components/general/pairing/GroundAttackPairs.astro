---
export const prerender = false;

import { getCollection, type CollectionEntry, z } from "astro:content";
import type { ComponentProps } from "astro/types";

import { ulid } from "ulidx";

import GridDisplay from "./gridDisplay.astro";
type GridDisplayProps = ComponentProps<typeof GridDisplay>;

import {
  AscendingLevels,
  GeneralArray,
  type GeneralArrayType,
  GeneralElement,
  type GeneralElementType,
  ClassEnum,
  qualityColor,
  type BuffParamsType,
} from "@schemas/index";

const DEBUG = false;

const table_name = `${Astro.url.pathname}-${ulid()}`

let allGeneralsJson = "";
let allGenerals = new Array<GeneralElementType>();
let generalsPromise = false;

//while no general can *have* both, I can evaluate generals assuming I will give them whichever that particular one needs.
let MyInvestmentLevel: BuffParamsType = {
  special1: qualityColor.enum.Gold,
  special2: qualityColor.enum.Gold,
  special3: qualityColor.enum.Gold,
  special4: qualityColor.enum.Gold,
  special5: qualityColor.enum.Disabled,
  stars: AscendingLevels.enum[10],
  dragon: true,
  beast: true,
};

const generalObjects: CollectionEntry<"generals">[] =
  await getCollection("generals");

if (generalObjects !== null && generalObjects !== undefined) {
  let generalIterator = generalObjects.values();

  for (const v of generalIterator) {
    const validation = GeneralElement.safeParse(v.data);
    if (validation.success) {
      if (validation.data.general.score_as === ClassEnum.enum.Ground) {
        allGenerals.push(validation.data);
      }
    } else {
      console.error(`bad validation ${validation.error.message}`);
    }
  }
  allGeneralsJson = JSON.stringify(allGenerals);
  allGenerals.map(async (g) => {
    if (DEBUG) console.log(`adding ${g.general.name}`)
    Astro.locals.addEG2EGS(g.general);
    
    await Astro.locals.enrichGeneral(g.general.name)
    .then(() => {
      if(DEBUG) {
        console.log(`${g.general.name} finished enriching function`)
      }
    });
  });
}

let aresult:
  | { success: true; data: GeneralArrayType }
  | { success: false; error: z.ZodError } = GeneralArray.safeParse(
  JSON.parse(allGeneralsJson)
);
if (aresult.success ) {
  if (DEBUG) console.log(`validation passed`);
  if(! (aresult.data !== undefined && aresult.data !== null && aresult.data.length > 1)) {
    console.error(`but I have no data`);
  }
} else {
  console.error(aresult.error);
}

---

<div class="table-container">
  <GridDisplay 
    name={table_name} 
    InvestmentLevel={MyInvestmentLevel}
  ></GridDisplay>
</div>

<style>
  .table-container {
    display: block;
    flex: 2 0 auto;
    
  }
</style>
