---
export const prerender = false;

import { z } from "astro:content";

import { FixedWidthParser } from 'fixed-width-parser';

import "@spectrum-css/vars/dist/spectrum-global.css";
import "@spectrum-css/vars/dist/spectrum-medium.css";
import "@spectrum-css/page/dist/index.css";
import "@spectrum-css/table/dist/index.css";
import "@spectrum-css/icon/dist/index.css";
import "@spectrum-css/ui-icons/dist/medium/Arrow100.svg";

import { delay } from 'nanodelay'


import {
  BuffParams,
  type BuffParamsType,
  ExtendedGeneral,
  GeneralElement,
  type GeneralElementType,
  GeneralPair,
  type GeneralPairType,
  GeneralClass,
  generalUseCase,
  qualityColor,
  AscendingLevels,
  type ExtendedGeneralType,
  Display,
  ExtendedGeneralStatus,
  dragon,
} from "@schemas/index";


interface Props {
  index: number,
  primary: string,
  secondary: string,
  InvestmentLevel: BuffParamsType;
}

const DEBUG = false;

const iterationLimit = 3;

const { index, primary, secondary, InvestmentLevel } = Astro.props;

const pGeneral: ExtendedGeneralType = Astro.locals.ExtendedGeneralMap.get(primary) ;
const sGeneral: ExtendedGeneralType = Astro.locals.ExtendedGeneralMap.get(secondary);
type DisplayPair = {
  primary: ExtendedGeneralType,
  secondary: ExtendedGeneralType,
  EvAnsRanking: number,
}
const pair: DisplayPair = {
  primary: pGeneral,
  secondary: sGeneral,
  EvAnsRanking: 0,
}
if(pGeneral === undefined || sGeneral === undefined) {
  console.log(`major problem in gridRow for ${primary} ${secondary}`)
  return;
}


let pEvAnsRank = -9;
let iterationBreaker = 0;
let pInComplete = true
do {
  await delay(1 + iterationBreaker*100).then(async () => {
    pEvAnsRank = await Astro.locals.EvAnsBuff(pGeneral.general.name, Display.enum.primary, {
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: InvestmentLevel.stars,
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast
    });
    if (DEBUG) {
      console.log(`${primary} status: ${pGeneral.status}`)
      console.log(`i ${iterationBreaker++}`)
    }
  })
  if(!pGeneral.status.localeCompare(ExtendedGeneralStatus.enum.complete)) {
    pInComplete = false;
  }
}while(pInComplete && iterationBreaker < iterationLimit )

let sEvAnsRank = -9;
iterationBreaker = 0;
let sInComplete = true
do {
  await delay(1 + iterationBreaker*100).then(async () => {
    sEvAnsRank = await Astro.locals.EvAnsBuff(sGeneral.general.name, Display.enum.assistant, {
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: AscendingLevels.enum[0],
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast
    });
    if (DEBUG) {
      console.log(`${primary} status: ${sGeneral.status}`)
      console.log(`i ${iterationBreaker++}`)
    }
  })
  if(!sGeneral.status.localeCompare(ExtendedGeneralStatus.enum.complete)) {
    sInComplete = false;
  }
}while(sInComplete && iterationBreaker < iterationLimit )

pair.EvAnsRanking = pEvAnsRank + sEvAnsRank;
if(DEBUG ) {
  console.log(`pair ${primary} ${secondary} EvAnsRanking is ${pair.EvAnsRanking}`)
}
---

<div class="spectrum-Table-row" role="rowgroup">
  <div class="spectrum-Table-cell" role="cell">
    {index}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.primary.general.name}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.secondary.general.name}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.EvAnsRanking}
  </div>
</div>