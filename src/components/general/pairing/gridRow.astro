---
export const prerender = false;

import "@spectrum-css/vars/dist/spectrum-global.css";
import "@spectrum-css/vars/dist/spectrum-medium.css";
import "@spectrum-css/page/dist/index.css";
import "@spectrum-css/table/dist/index.css";
import "@spectrum-css/icon/dist/index.css";
import "@spectrum-css/ui-icons/dist/medium/Arrow100.svg";

import { delay } from 'nanodelay'


import {
  type BuffParamsType,
  AscendingLevels,
  type ExtendedGeneralType,
  Display,
  ExtendedGeneralStatus,
  } from "@schemas/index";


interface Props {
  index: number,
  primary: string,
  secondary: string,
  InvestmentLevel: BuffParamsType;
}

const DEBUG = true;

const iterationLimit = 3;

const { index, primary, secondary, InvestmentLevel } = Astro.props;

interface DisplayPair {
  primary: ExtendedGeneralType,
  secondary: ExtendedGeneralType,
  EvAnsRanking: number,
  AttackRanking: number,
}

let pEvAnsRank = -9;
let pAttackRanking = -9;
let iterationBreaker = 0;
let pInComplete = true


const pGeneral: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => {
  return !primary.localeCompare(element.general.name)
})
const sGeneral: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find((element) => { return !secondary.localeCompare(element.general.name)})

if(pGeneral === undefined || sGeneral === undefined) {
  console.log(`major problem in gridRow for ${primary} ${secondary}`)
  return;
} else if (DEBUG) {
  console.log(`both generals found: ${pGeneral.general.name} ${sGeneral.general.name}`)
}

const pair: DisplayPair = {
  primary: pGeneral,
  secondary: sGeneral,
  EvAnsRanking: 0,
  AttackRanking: 0,
}

do {
  await delay(1 + iterationBreaker*100).then(() => {
    pEvAnsRank = pGeneral.computedBuffs.get(Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: InvestmentLevel.stars,
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast
    }))?.EvAns ?? -6;
    pAttackRanking = pGeneral.computedBuffs.get(Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: InvestmentLevel.stars,
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast
    }))?.AttackRank ?? -9.1;
    if (DEBUG) {
      console.log(`${primary} status: ${pGeneral.status}`)
      console.log(`i ${iterationBreaker++}`)
    }
  })
  if(!pGeneral.status.localeCompare(ExtendedGeneralStatus.enum.complete)) {
    pInComplete = false;
  }
}while(pInComplete && iterationBreaker < iterationLimit )

let sEvAnsRank = -9;
let sAttackRanking = -9;
iterationBreaker = 0;
let sInComplete = true
do {
  await delay(1 + iterationBreaker*100).then(() => {
    Astro.locals.GeneralBuffs(sGeneral.general.name, Display.enum.assistant, {
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: AscendingLevels.enum[0],
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast
    });
    sEvAnsRank = sGeneral.computedBuffs.get(Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: AscendingLevels.enum[0],
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast
    }))?.EvAns ?? -6;
    sAttackRanking = sGeneral.computedBuffs.get(Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: AscendingLevels.enum[0],
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast
    }))?.AttackRank ?? -9.1;
    if (DEBUG) {
      console.log(`${primary} status: ${sGeneral.status}`)
      console.log(`i ${iterationBreaker++}`)
    }
  })
  if(!sGeneral.status.localeCompare(ExtendedGeneralStatus.enum.complete)) {
    sInComplete = false;
  }
}while(sInComplete && iterationBreaker < iterationLimit )

pair.EvAnsRanking = pEvAnsRank + sEvAnsRank;
if(DEBUG ) {
  console.log(`pair ${primary} ${secondary} EvAnsRanking is ${pair.EvAnsRanking}`)
}

pair.AttackRanking = pAttackRanking + sAttackRanking;
if(DEBUG) {
  console.log(`pair ${primary} ${secondary} Attack: ${pair.AttackRanking}`)
}

---

<div class="spectrum-Table-row" role="rowgroup">
  <div class="spectrum-Table-cell" role="cell">
    {index}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.primary.general.name}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.secondary.general.name}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.EvAnsRanking}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.AttackRanking}
  </div>
</div>