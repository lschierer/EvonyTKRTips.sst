---
export const prerender = false;

import "@spectrum-css/vars/dist/spectrum-global.css";
import "@spectrum-css/vars/dist/spectrum-medium.css";
import "@spectrum-css/page/dist/index.css";
import "@spectrum-css/table/dist/index.css";
import "@spectrum-css/icon/dist/index.css";
import "@spectrum-css/ui-icons/dist/medium/Arrow100.svg";

import { delay } from "nanodelay";

import {
  type BuffParamsType,
  AscendingLevels,
  type ExtendedGeneralType,
  Display,
  ExtendedGeneralStatus,
} from "@schemas/index";

interface Props {
  index: number;
  primary: string;
  secondary: string;
  InvestmentLevel: BuffParamsType;
}

const DEBUG = false;

const iterationLimit = 3;

const { index, primary, secondary, InvestmentLevel } = Astro.props;

interface DisplayPair {
  primary: ExtendedGeneralType;
  secondary: ExtendedGeneralType;
  EvAnsRanking: number;
  AttackRanking: number;
  DefenseRanking: number;
}

let pEvAnsRank = -9;
let pAttackRanking = -9;
let pDefenseRanking = -9;

let iterationBreaker = 0;

const pGeneral: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find(
  (element) => {
    return !primary.localeCompare(element.general.name);
  }
);
const sGeneral: ExtendedGeneralType = Astro.locals.ExtendedGenerals.find(
  (element) => {
    return !secondary.localeCompare(element.general.name);
  }
);

if (pGeneral === undefined || sGeneral === undefined) {
  console.log(`major problem in gridRow for ${primary} ${secondary}`);
  return;
} else if (DEBUG) {
  console.log(
    `both generals found: ${pGeneral.general.name} ${sGeneral.general.name}`
  );
}

const pair: DisplayPair = {
  primary: pGeneral,
  secondary: sGeneral,
  EvAnsRanking: 0,
  AttackRanking: 0,
  DefenseRanking: 0,
};

iterationBreaker = 0;
while (ExtendedGeneralStatus.enum.complete.localeCompare(pGeneral.status) && iterationBreaker < 10) {
  if (DEBUG) {
    console.log(`${pGeneral.general.name} is not complete for General.astro`);
    console.log(`status is ${pGeneral.status}`);
    console.log(iterationBreaker++);
  }
  await delay(60 * iterationBreaker);
}

pEvAnsRank =
  pGeneral.computedBuffs.get(
    Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: InvestmentLevel.stars,
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast,
    })
  )?.EvAns ?? -6;
  
pAttackRanking =
  pGeneral.computedBuffs.get(
    Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: InvestmentLevel.stars,
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast,
    })
  )?.AttackRank ?? -6;

pDefenseRanking =
  pGeneral.computedBuffs.get(
    Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: InvestmentLevel.stars,
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast,
    })
  )?.DefenseRank ?? -6;

let sEvAnsRank = -9;
let sAttackRanking = -9;
let sDefenseRanking = -9;

iterationBreaker = 0;

iterationBreaker = 0;
while (ExtendedGeneralStatus.enum.complete.localeCompare(sGeneral.status)) {
  if (DEBUG) {
    console.log(`${sGeneral.general.name} is not complete for General.astro`);
    console.log(`status is ${sGeneral.status}`);
    console.log(iterationBreaker++);
  }
  await delay(60 * iterationBreaker);
}

sEvAnsRank =
  sGeneral.computedBuffs.get(
    Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: AscendingLevels.enum[0],
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast,
    })
  )?.EvAns ?? -6;

sAttackRanking =
  sGeneral.computedBuffs.get(
    Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: AscendingLevels.enum[0],
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast,
    })
  )?.AttackRank ?? -6;

sDefenseRanking =
  sGeneral.computedBuffs.get(
    Astro.locals.InvestmentOptions2Key({
      special1: InvestmentLevel.special1,
      special2: InvestmentLevel.special2,
      special3: InvestmentLevel.special3,
      special4: InvestmentLevel.special4,
      special5: InvestmentLevel.special5,
      stars: AscendingLevels.enum[0],
      dragon: InvestmentLevel.dragon,
      beast: InvestmentLevel.beast,
    })
  )?.DefenseRank ?? -6;

pair.EvAnsRanking = pEvAnsRank + sEvAnsRank;
if (DEBUG) {
  console.log(
    `pair ${primary} ${secondary} EvAnsRanking is ${pair.EvAnsRanking}`
  );
}

pair.AttackRanking = pAttackRanking + sAttackRanking;
pair.DefenseRanking = pDefenseRanking + sDefenseRanking;
if (DEBUG) {
  console.log(`pair ${primary} ${secondary} Attack: ${pair.AttackRanking} Defense: ${pair.DefenseRanking}`);
}



---

<div class="spectrum-Table-row" role="rowgroup">
  <div class="spectrum-Table-cell" role="cell">
    {index}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.primary.general.name}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.secondary.general.name}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.EvAnsRanking}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.AttackRanking}
  </div>
  <div class="spectrum-Table-cell" role="cell">
    {pair.DefenseRanking}
  </div>
</div>
