---
import { Debug } from 'astro:components';
import {getEntry, z} from "astro:content";
import {standardSkillBook, specialSkillBook} from '../schemas/evonySchemas';

const { generalEntry } = Astro.props;
if( generalEntry === null || generalEntry === undefined || generalEntry.length <= 0) {
    console.error(`bogus generalEntry`);

}
const entry = await getEntry('generals', generalEntry);
if (entry === undefined) {
    return Astro.redirect("/404");
}
const data = entry.data;
const general = data.general;

type standardSkillBookType = z.infer<typeof standardSkillBook>;
type specialSkillBookType = z.infer<typeof specialSkillBook>;

const generalName = general.name.toLocaleLowerCase().replace(/\s+/g, '_');

---

<div class="GeneralDetails" id={generalName}>
    <h4>{general.name}</h4>
    Level: {general.level}
    Stars: {general.stars}
    {general.specialities && <div class="Specialities">
        test
    </div> }
    {general.books && <div class="SkillBooks" style="margin: 1px;">
        <h5 style="margin-bottom: 3px;">Special Skill:</h5>
            {general.books.map((book) => (
                    (specialSkillBook.safeParse(book)).success && (
                            <>
                                <h6 style="margin-top: 6px; margin-bottom: 3px;">{book.name}</h6>
                                {Array.isArray(book.buff) && (
                                        <ul style="margin: 0px;" id={book.name.toLocaleLowerCase().replace(/\s+/g, '_')}>
                                            {book.buff.map((b) => (
                                                    <li style="margin: 0px;">
                                                        {b.condition } {b.class !== 'all' ? b.class : 'all troops '} {b.attribute} {(b.value[0] < 0) ? '-' : '+'}{b.value[0]}{b.value[1] ? '%': ''}
                                                    </li>
                                            ))}
                                        </ul>
                                )}
                            </>
                    )
            ))}
    </div> }
</div>



<Debug {general} />