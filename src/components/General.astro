---
import {Debug} from 'astro:components';
import {getEntry, getCollection, type CollectionEntry} from "astro:content";
import 'iconify-icon';
import {z} from 'zod';

import Banner from "../components/Spectrum/Banner.astro";

import {
  type bookConflictsType,
  type Buff,
  Condition,
  type GeneralClassType,
  generalConflicts,
  type generalConflictsType,
  generalConflictCollection,
  type GeneralElementType,
  GeneralClass,
  Note,
  type NoteType,
  GeneralElement,
  type BookType,
  standardSkillBook,
  specialSkillBook,
  type specialSkillBookType,
  type standardSkillBookType,
  Book, buffUnion,
  syslogSeverity,
  type syslogSeverityType,
type BuffType,
} from '@schemas/index';

import { generalUseCase,
    type generalUseCaseType
} from '@schemas/generalsSchema.ts'


import { buffAdverbs, buff as buff_calc} from './general/buff.ts';

import { BookIcon } from '@spectrum-web-components/icons-workflow';

const adverbs = buffAdverbs[generalUseCase.enum.all]

const severity = {
    [syslogSeverity.enum.emerg]: () => {
        return "error"
    },
    [syslogSeverity.enum.alert]: () => {
        return "error"
    },
    [syslogSeverity.enum.crit]: () => {
        return "error"
    },
    [syslogSeverity.enum.err]: () => {
        return "warning"
    },
    [syslogSeverity.enum.warning]: () => {
        return "warning"
    },
    [syslogSeverity.enum.notice]: () => {
        return "info"
    },
    [syslogSeverity.enum.info]: () => {
        return "info"
    },
    [syslogSeverity.enum.debug]: () => {
        return "info"
    },
}

const buffProps = {
  dragon: true,
  beast: false,
  ascending: '10',
  speciality1: 'Gold',
  speciality2: 'Gold',
  speciality3: 'Gold',
  speciality4: 'Gold',
  extraBooks: [],
}


const {generalEntry} = Astro.props;
let data;
if (generalEntry === null || generalEntry === undefined || generalEntry.length <= 0) {
    return Astro.redirect("/404");
}
const entry: CollectionEntry<'generals'> | undefined = await getEntry('generals', generalEntry);
if (entry === undefined || entry === null) {
    return Astro.redirect("/404");
} else {
    data = entry.data;
}
let usageNotes = '';
let general: GeneralClassType ;
let generalName = '';
let attack = 0;
let attackBuff = 0;
let defense = 0;
let defenseBuff = 0;
let hp = 0;
let hpBuff = 0;
let starsNum = 0;
let starsLimit = 0;
let starsHtml = ' ';
let level = 1;
const intrinsic = ["leadership", "attack", "defense", "politics"]
let conflictData: bookConflictsType[] = new Array<bookConflictsType>();
let collectionArray: CollectionEntry<'generalConflictData'>[] | generalConflictsType[];

const validation = GeneralElement.safeParse(data);
if (validation.success) {
    const generaLObject = validation.data;
    general = generaLObject.general;
    
    starsNum = +(general.stars ? general.stars : 0);
    starsLimit = (starsNum <= 5) ? starsNum : 5;
    for (let i = 0; i < starsLimit; i++) {
        if ((starsNum >= 6) && (i < (starsNum - 5))) {
            starsHtml = starsHtml.concat('<iconify-icon style="color: var(--spectrum-red-900)" icon="mdi:star"></iconify-icon>');
        } else {
            starsHtml = starsHtml.concat('<iconify-icon style="color: var(--spectrum-yellow-300)" icon="mdi:star"></iconify-icon>');
        }
        
    }
    
    generalName = general.name.toLocaleLowerCase().replace(/\s+/g, '_');
    
    const result = buff_calc(general, adverbs, buffProps)
    attackBuff = result.attackBuff;
    defenseBuff = result.defenseBuff;
    hpBuff = result.hpBuff;
    attack = (general.attack + (general.attack_increment as number) * 45) + (general.attack + (general.attack_increment as number) * 45 * attackBuff)
    defense = (general.defense + (general.defense_increment as number) * 45) + (general.defense + (general.defense_increment as number) * 45 * defenseBuff)
    hp = (general.leadership + (general.leadership_increment as number) * 45) + (general.leadership + (general.leadership_increment as number) * 45 * hpBuff)
    level = (general.display === 'summary') ? (+general.level * 45) : +general.level;
    const notes = z.array(Note).safeParse(general.note);
    if (notes.success) {
        const mydata: NoteType[] = notes.data;
        if (notes.data !== undefined && notes.data !== null && notes.data.length >= 1) {
            const result = mydata.map((note) => {
                return `
                    <sp-banner class="not-content" type=${severity[note.severity]()} client:only>
                        <div slot="header">General Usage Note</div>
                        <div slot="content">
                            ${note.text}
                        </div>
                    </sp-banner><br/>
                    `;
            })
            if(result !== null && result !== undefined) {
                result.forEach(r => usageNotes = usageNotes.concat(r))
            }
        }
    }
    collectionArray = await getCollection('generalConflictData');
    if (collectionArray !== null && collectionArray !== undefined) {
        collectionArray = collectionArray.map((ca) => {
            return ca.data
        });
        const valid = generalConflictCollection.safeParse(collectionArray)
        if (valid.success) {
            for (let i = 0; i < valid.data.length; i++) {
                let o1 = valid.data[i]
                let valid2 = generalConflicts.safeParse(o1);
                if (valid2.success) {
                    let data: generalConflictsType | undefined;
                    if (valid2.data !== undefined && valid2.data.conflicts !== undefined) {
                        let conflicts = valid2.data.conflicts;
                        for (const key in conflicts) {
                            if (key.localeCompare('other')) {
                                console.log(`inside Record of conflicts`)
                                const items = conflicts[key as keyof typeof conflicts];
                                const gc = new Set<string>;
                                items.forEach((g) => {
                                    console.log(`--${JSON.stringify(g)}--`);
                                    gc.add(g);
                                })
                                if ([...gc].includes(general.name)) {
                                    if(valid2.data.books !== null && valid2.data.books !== undefined)  {
                                        const books = {'books': valid2.data.books };
                                        conflictData.push(books)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (conflictData.length >= 1) {
        conflictData = [conflictData].flat(1);
        const result = conflictData.map((c) => {
            if (c !== null && c !== undefined && c.books !== null && c.books !== undefined) {
                console.log(`${JSON.stringify(c)}`)
                return c.books.map((book: standardSkillBookType) => {
                  let condition = 'all the time.';
                  let warning = false;
                  for (let i = 0; i < book.buff.length; i++) {
                    const keys = Object.keys(book.buff[i]);
                    console.log(`found keys ${keys}`)
                    if(book.buff[i].condition !== null && book.buff[i].condition !== undefined ) {
                        if (book.buff[i].condition === Condition.enum.When_Not_Mine) {
                            condition = 'when the book is on my paired general.'
                            warning = true;
                        } else {
                            condition = book.buff[i].condition as string
                        }
                    } else {
                        condition = 'all the time.' ;
                    }
                  }
                  return `
                    <sp-banner class="not-content" 
                    type=${warning ? 
                        severity[syslogSeverity.enum.warning]()
                        : severity[syslogSeverity.enum.alert]()} 
                    client:only>
                        <div slot="header">General Conflict Notice</div>
                        <div slot="content">
                            This general has conflicts with the ${book.name} level ${book.level} skill book.
                            This conflict is in effect ${condition}
                        </div>
                    </sp-banner>
                    `;
                
                })
            }
        })
        if(result !== undefined) {
            result.forEach((r) => {
                if(r !== undefined) {
                    r.forEach(r2 => usageNotes = usageNotes.concat(r2))
                }
            })
        }
    }
}

---
<script>
    import '@spectrum-web-components/banner/sp-banner.js';
</script>
{(general !== undefined && general !== null) && (
<div class="not-content UsageNotes">
    <Fragment set:html={usageNotes} />
</div>
<div class="GeneralDetails not-content" id={generalName}>
    <span class="center spectrum-Heading spectrum-Heading--sizeS">Level: {level}</span>
    
    {(starsHtml !== undefined && starsHtml !== null) && (
        <div class=" not-content Stars">
            <Fragment set:html={starsHtml} />
        </div>
        <br/>
    )}
    <div class="IntrinsicAttributes">
      {intrinsic.map((ia) => ((ia !== undefined) &&
        <div class={ia}>
          <span class="label spectrum-Body spectrum-Body--sizeM">{ia[0].toUpperCase() + ia.slice(1)}</span><br/>
          <span class="label spectrum-Body spectrum-Body--sizeS">Base:</span> {general[ia as keyof typeof general]}<br/>
          <span class="label spectrum-Body spectrum-Body--sizeS">Growth Rate:</span> {general[(ia + '_increment') as keyof typeof general]}<br/>
          <span class="label spectrum-Body spectrum-Body--sizeS">Max:</span> {((general[(ia as keyof typeof general)] as number) + ((general[((ia + '_increment') as keyof typeof general)] as number) * 45)).toFixed(2)}<br/>
          {(!ia.localeCompare("attack")) &&
            <>
              <span class="label spectrum-Body spectrum-Body--sizeS">Effective Buff:</span> {attackBuff}<br/>
              <span class="label spectrum-Body spectrum-Body--sizeS">Score:</span> {attack.toFixed(2)}<br/>
            </>}
          {(!ia.localeCompare("defense")) &&
            <>
                <span class="label spectrum-Body spectrum-Body--sizeS">Effective Buff:</span> {defenseBuff}<br/>
                <span class="label spectrum-Body spectrum-Body--sizeS">Score:</span> {defense.toFixed(2)}<br/>
            </>}
          {(!ia.localeCompare("leadership")) &&
            <>
                <span class="label spectrum-Body spectrum-Body--sizeS">Effective Buff:</span> {hpBuff}<br/>
                <span class="label spectrum-Body spectrum-Body--sizeS">Score:</span> {hp.toFixed(2)}<br/>
            </>}
        </div>
      ))}
    </div>
    <br/>
  {general.specialities && (
    <span class="label spectrum-Heading spectrum-Heading--sizeXS">Specialities</span>
    <div class="Specialities non-content">
        {general.specialities && general.specialities.map((gs) => (
          <div class="Speciality non-content">
              <span class="label spectrum-Heading spectrum-Heading--sizeXXS">{gs.name}</span>
              {Array.isArray(gs.attribute) && (
                <div class="non-content">
                    {gs.attribute.map((s) => (
                      <div class={"non-content " + s.level}  >
                          <span class="label spectrum-Body spectrum-Body--sizeM">{s.level} Level:</span>
                          <ul >
                              {s.buff.map((b: BuffType) => (
                                <>
                                    <li >
                                        {b.condition ? (b.condition as string).replaceAll(/_/g, ' ') : ''} 
                                        {b.class !== 'all' ? b.class : 'all troops '} 
                                        {b.attribute ? b.attribute.replaceAll(/_/g, ' ') : ''} 
                                        {(b.value && b.value.number < 0) ? '-' : '+'}{b.value!.number}{b.value!.unit ? '%' : ''}
                                    </li>
                                </>
                              ))}
                          </ul>
                      </div>
                    ))}
                </div>
              )}
          </div>
        ))}
    </div>
  )}
    <br/>
  {(starsNum && general.ascending) && (
          <span class="label spectrum-Heading spectrum-Heading--sizeXS">Ascending Attributes</span>
          <div class="Ascending non-content">
            {general.ascending.map((a) => (
                    <>
                        <div class="ascendingAttribute non-content">
                            <span class="spectrum-Heading spectrum-Heading--sizeXXS center">
                                {+a.level - 5}{+a.level >= 9 ? 'th' : +a.level === 8 ? 'rd' : (+a.level) === 7 ? "nd" : 'st'} Star
                            </span><br/>
                            <ul class="non-content">
                              {a.buff.map((b: BuffType) => (
                                <li class="non-content">
                                    {b.condition ? (b.condition as string).replaceAll(/_/g, ' '): ''} 
                                    {(b.class === undefined || b.class === null) ? '' : b.class !== 'all' ? b.class : 'all troops '} 
                                    {b.attribute? b.attribute.replaceAll(/_/g, ' ') : ''} 
                                    {(b.value && b.value.number < 0) ? '-' : '+'}{b.value!.number}{b.value!.unit ? '%' : ''}
                                </li>
                              ))}
                            </ul>
                        </div>
                    </>
            ))}
          </div>
  )}
    <br/>
  {general.books && (
    <div class="SkillBooks non-content" style="margin: 1px;">
        <span class="spectrum-Heading spectrum-Heading--sizeXS">Special Skill:</span>
        {general.books.map((book: BookType) => (
          (specialSkillBook.safeParse(book)).success && (
            <>
                <span class="spectrum-Heading spectrum-Heading--sizeXXS">{book.name}</span>
                {Array.isArray((book as specialSkillBookType).buff) && (
                  <ul class="non-content" id={book.name.toLocaleLowerCase().replace(/\s+/g, '_')}>
                      {book.buff.map((b) => (
                        <li >
                            {b.condition ? (b.condition as string).replaceAll(/_/g, ' ') : ''} 
                            {(b.class === undefined || b.class === null) ? '' : b.class !== 'all' ? b.class : 'all troops '} 
                            {b.attribute ? b.attribute.replaceAll(/_/g, ' ') : ''} 
                            {(b.value && b.value.number < 0) ? '-' : '+'}{b.value!.number}{b.value!.unit ? '%' : ''}
                        </li>
                      ))}
                  </ul>
                )}
            </>
          )
        ))}
    </div>
  )}
</div>
<style>
    div.GeneralDetails {
        display: flex;
        flex-direction: column;

        & ul {
            margin: 0px;
            padding-top: 0px;
            padding-left: 1rem;

            & li {
                padding-top: 0px;
                padding-bottom: 0px;
                margin-top: 0px;
                margin-bottom: 0px;
                margin-left: 0.5rem;;                
            }
        }

        :is(div) {
            align-content: center;
            justify-content: center;
            margin: 0.1px;
        }

        & .spectrum-Heading {
            color: var(--sl-color-text-accent);
        }

        & .center {
            align-self: center;
        }

        & .label {
            color: var(--sl-color-text-accent);
        }

        & .IntrinsicAttributes {
            columns: 4;
        }


        & .Stars {
            display: flex;
            flex-direction: row;
            justify-content: center;
        }

        & .Specialities {
            margin: 1px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;

            & .Green {
                background-color: var(--spectrum-celery-400);
            }

            & .Blue {
                background-color: var(--spectrum-blue-400);
            }

            & .Purple {
                background-color: var(--spectrum-purple-400);
            }

            & .Orange {
                background-color: var(--spectrum-orange-400);
            }

            & .Gold {
                background-color: var(--spectrum-yellow-400);
            }
        }

        & .Ascending {
            margin: 1px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        

    }

    sp-banner {
        margin-top: 5px;
    }

</style>

  
)}
